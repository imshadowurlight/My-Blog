/*
Navicat MySQL Data Transfer

Source Server         : 192.168.27.131
Source Server Version : 50718
Source Host           : 192.168.27.131:3306
Source Database       : tale

Target Server Type    : MYSQL
Target Server Version : 50718
File Encoding         : 65001

Date: 2017-09-05 23:25:19
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for t_attach
-- ----------------------------
DROP TABLE IF EXISTS `t_attach`;
CREATE TABLE `t_attach` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `fname` varchar(100) NOT NULL DEFAULT '',
  `ftype` varchar(50) DEFAULT '',
  `fkey` varchar(100) NOT NULL DEFAULT '',
  `author_id` int(10) DEFAULT NULL,
  `created` int(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_attach
-- ----------------------------

-- ----------------------------
-- Table structure for t_comments
-- ----------------------------
DROP TABLE IF EXISTS `t_comments`;
CREATE TABLE `t_comments` (
  `coid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cid` int(10) unsigned DEFAULT '0',
  `created` int(10) unsigned DEFAULT '0',
  `author` varchar(200) DEFAULT NULL,
  `author_id` int(10) unsigned DEFAULT '0',
  `owner_id` int(10) unsigned DEFAULT '0',
  `mail` varchar(200) DEFAULT NULL,
  `url` varchar(200) DEFAULT NULL,
  `ip` varchar(64) DEFAULT NULL,
  `agent` varchar(200) DEFAULT NULL,
  `content` text,
  `type` varchar(16) DEFAULT 'comment',
  `status` varchar(16) DEFAULT 'approved',
  `parent` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`coid`),
  KEY `cid` (`cid`),
  KEY `created` (`created`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_comments
-- ----------------------------

-- ----------------------------
-- Table structure for t_contents
-- ----------------------------
DROP TABLE IF EXISTS `t_contents`;
CREATE TABLE `t_contents` (
  `cid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL,
  `slug` varchar(200) DEFAULT NULL,
  `created` int(10) unsigned DEFAULT '0',
  `modified` int(10) unsigned DEFAULT '0',
  `content` text COMMENT '内容文字',
  `author_id` int(10) unsigned DEFAULT '0',
  `type` varchar(16) DEFAULT 'post',
  `status` varchar(16) DEFAULT 'publish',
  `tags` varchar(200) DEFAULT NULL,
  `categories` varchar(200) DEFAULT NULL,
  `hits` int(10) unsigned DEFAULT '0',
  `comments_num` int(10) unsigned DEFAULT '0',
  `allow_comment` tinyint(1) DEFAULT '1',
  `allow_ping` tinyint(1) DEFAULT '1',
  `allow_feed` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`cid`),
  UNIQUE KEY `slug` (`slug`),
  KEY `created` (`created`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_contents
-- ----------------------------
INSERT INTO `t_contents` VALUES ('1', 'about my blog', 'about', '1487853610', '1487872488', '### Hello World\r\n\r\nabout me\r\n\r\n### ...\r\n\r\n...', '1', 'page', 'publish', null, null, '0', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('3', '目录', null, '1502195172', '1502806894', '# linux\r\n\r\n1. [硬件][1]\r\n2. [常识][2]\r\n3. [CentOS6.4测试版本服务器][3]\r\n4. [远程连接][4]\r\n5. [linux的常用指令][5]\r\n6. [vi的常用指令][6]\r\n\r\n# 应用部署\r\n\r\n1. [部署博客系统][7]\r\n\r\n# 其他\r\n1. [鸡汤_如何学习][8]  \r\n\r\n\r\n  [1]: http://localhost:8080/article/4/preview\r\n  [2]: http://localhost:8080/article/6/preview\r\n  [3]: http://localhost:8080/article/7/preview\r\n  [4]: http://127.0.0.1:8080/article/8/preview\r\n  [5]: http://localhost:8080/article/9/preview\r\n  [6]: http://localhost:8080/article/10\r\n  [7]: http://localhost:8080/article/5/preview\r\n  [8]: http://localhost:8080/article/11/preview', '1', 'post', 'publish', '目录', 'default', '22', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('4', '硬件', null, '1502195254', '1502196938', '# 服务器的品牌\r\n\r\n1. 流行的品牌:DELL && HP && IBM\r\n\r\n# 电源\r\n\r\n1. 一般使用双电源,集群另说\r\n\r\n# bios\r\n    	\r\n1. 通电后负责自检,设置,并启动操作系统.\r\n2. 常见的bios有Award & AMI & Phoenix\r\n\r\n# 硬盘\r\n	\r\n1. 外部存储设备;\r\n2. 他的格式对效率有极大的影响,未来对硬盘的调优及其重要\r\n\r\n# CPU\r\n\r\n1. 一般有2 ~ 4颗CPU,每颗CPU2 ~ 4核;\r\n2. 如果使用虚拟机的功能,那么一般会升级到4 ~ 8颗CPU,配置48 ~ 128左右的内存.\r\n\r\n# 硬盘\r\n\r\n1. SSD > SAS > SATA\r\n2. 一般会使用SAS,快的同时,价格还算能接受.\r\n3. 然后SSD做线下备份.\r\n\r\n\r\n\r\n\r\n\r\n', '1', 'post', 'publish', 'linux', 'default', '18', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('5', '部署博客应用', null, '1502195349', '1502805747', '# 部署博客应用\r\n\r\n    1. 首先从github上clone下来\r\n    2. 导入数据脚本文件\r\n    3. 把项目导入到idea,并修改配置文件中的数据库配置\r\n    4. 发现项目需要v1.8的jdk,去下载安装jdk.并配置到应用当中\r\n\r\n```log\r\n后续:\r\n后面如何将应用部署到服务器\r\n如何将应用封装成docker容器\r\n```', '1', 'post', 'publish', '应用', 'default', '12', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('6', '常识', null, '1502204054', '1502375796', '# GNU & GPL \r\n\r\n1. GNU项目是自由软件组织的一个项目,他们想开发一个独立开源免费的unix,事实上,他们也做到了,除了内核\r\n2. GPL是General Public Listence协议,就是你可以自由获取别人的开源软件,随意改进发布,但是不能闭源.最近好像GPL协议不太受欢迎了~\r\n\r\n\r\n# linux的应用范围\r\n\r\n1. 服务器\r\n2. 嵌入式系统\r\n3. 桌面PC\r\n\r\n\r\n# 32位与64位的寻址能力\r\n    在学习汇编的时候我就特别好奇,闻所未闻的8位计算机和已经消失的16位计算机,他们的寻址范围是多少?好可怜的说\r\n    因为32位的寻址能力理论上只有4G,实际上也就3G+而已,内存再大他用不了\r\n    64位寻址范围到达128G,这个就有点看头了,这也是为什么一台服务器最大内存只配置到128G的原因,因为你再加内存他也用不了,只能搞集群.', '1', 'post', 'publish', 'linux', 'default', '6', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('7', '我的服务器', null, '1502206429', '1502977285', '# 版本\r\n\r\nCentOS Linux release 7.3.1611 (Core)\r\n\r\n# 安装环境\r\n\r\n1. 我的笔记本\r\n2. 主要是我的台式内存不够用啊,只有8G,他么的去京东看了一眼,8G要500多,玛德我要哭了.', '1', 'post', 'publish', 'linux', 'default', '7', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('8', '远程连接', null, '1502284451', '1502288426', '# 明文远程连接\r\n1. ftp\r\n2. telnet\r\n\r\n\r\n# 密文远程连接\r\n1. ssh\r\n\r\n\r\n# 连接工具\r\n1. 我选择xshell\r\n2. 配置xshell的日志功能,把操作记录保存到日志里,方便以后查看\r\n3. 配置xshell的上传下载功能\r\n4. Xshell同时向多个会话发送指令的方法\r\n\r\n\r\n## xshell的上传下载功能\r\n    1. 原来xshell这么流弊的啊;\r\n    2. 先去服务器安装lrzsz这个软件\r\n    3. 然后,配置上传文件的地址和下载文件的地址\r\n    4. 使用rz -E从windows上获取文件\r\n    5. 使用sz -E filename向windows发送文件\r\n\r\n## Xshell同时向多个会话发送指令的方法\r\nXshell很骚啊,可惜,并没有把么多主机给我操作,我认为这种情况很少会出现\r\n不过,姑且在这里mark一下咯\r\n[同时向多个会话发送指令][1]\r\n\r\n\r\n  [1]: http://www.linuxidc.com/Linux/2015-05/117975.htm', '1', 'post', 'publish', 'linux', 'default', '8', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('9', '常用但是从来记不住的指令', null, '1502292070', '1502374148', '# 指令集\r\n## alias\r\n## unalias\r\n\r\n    别名有两个比较厉害的作用\r\n    一是可以把很长的命令简化\r\n    而是对敏感的命令进行误操作保护\r\n\r\n## find\r\n\r\n    这个命令本身不复杂,但是参数很复杂\r\n    -type f    (在指定文件类型中查找,f代表普通文件)\r\n    -name \"\"    (查找名为\"***\"的文件) \r\n\r\n## 三剑客\r\n### grep\r\n    三个之中就这个最简单了,就不解释了\r\n\r\n### sed\r\n    man的解释是这样子的:stream editor for filtering and transforming text\r\n    对文本进行过滤转换,据说擅长过滤行.\r\n\r\n    sed -n \'10,20p\' a.txt\r\n    查找10~20行的内容, -n 取消默认的输出,  p就是print.\r\n    \r\n    sed -i s#abc#efg#g a.txt\r\n    把a.txt的所有abc替换为efg.\r\n    \r\n\r\n### awk\r\n    awk \'{if(NR>9&&NR<21) print $0}\' a.txt\r\n    据说擅长过滤列,我反正用的很少\r\n\r\n## xargs\r\n    xargs - build and execute command lines from standard input\r\n    管道的好朋友咯\r\n\r\n\r\n\r\n\r\n', '1', 'post', 'publish', 'linux', 'default', '25', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('10', '我是个伪vi粉', null, '1502292207', '1502294526', '# 我总是记不住vi的操作\r\n\r\n| www.2to1| 1to2.www | explain | \r\n| ------------- |:-------------:| -------------:| \r\n| ctrl+f         | 向下翻一页     | forward  | \r\n| ctrl+b        | 修改                | back       |\r\n| gg             | 切换首行         |            \r\n| G             | 切换尾行        |  \r\n| 0             | 切换列行         |            \r\n| $             | 切换列尾          |  \r\n| n;space             | 切换第n列         |            \r\n| n;enter             | 向下移动n行         |             \r\n\r\n\r\n| www.2to1| 1to2.www | \r\n| ------------- |:-------------:| \r\n| /keyword        |搜索某关键字      | \r\n| n       | 重复上一次搜索                | \r\n| N             | 反向重复上一次搜索         |            \r\n| :1,$s/keyword1/keyword2/g              | 全文替换        |  \r\n| :n1,n2s/keyword1/keyword2/g             | 从n1行都n2行替换          |            \r\n| :1,$s/keyword1/keyword2/gc             | 添加替换确认          |  \r\n\r\n| www.2to1| 1to2.www | \r\n| ------------- |:-------------:| \r\n| x        |向后删除      | \r\n| X       | 向前删除                | \r\n| yy             | 复制一行          |            \r\n| p              | 向下粘贴       |  \r\n| dd             | 删除一行           |            \r\n| n;dd             | 向下删除n行        |  \r\n| u             | 恢复上一次的操作          |            \r\n| ctrl+r             | 撤销恢复        |  \r\n|.           | 重复上一次操作       |  \r\n\r\n| www.2to1| 1to2.www | \r\n| ------------- |:-------------:| \r\n| :sp [filename]       |打开其他文件      | \r\n| ctrl+w;up       | 切换                | \r\n| ctrl+w;down             | 切换          |            \r\n| ctrl+w;q              | 离开       |  \r\n \r\n\r\n\r\n# 常识\r\n## vi的三种模式\r\n| www.2to1| 1to2.www | \r\n| ------------- |:-------------:| \r\n| command mode             | 移动;复制粘贴;删除;查找等    | \r\n| insert mode                    | 修改                                     |\r\n| command-line mode      | 读取;存储;others功能           |', '1', 'post', 'publish', 'linux', 'default', '29', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('11', '送自己的一碗鸡汤', null, '1502806822', '1502806822', '# 没错,我就是卖汤的\r\n\r\n## 我什么都想学\r\n```log\r\n如题\r\n我就是个笨蛋\r\n心比天高\r\n但是脑袋瓜不灵活\r\n谈不上聪明\r\n也跟勤奋扯不上边\r\n但是遇到新的东西又总是按捺不住\r\n最糟糕的是只有三分钟热情\r\n在浩如烟海的计算机知识海洋中\r\n简直就像一叶没帆没桨没罗盘的小破船\r\n随波逐流\r\n浪到哪是哪\r\n```\r\n\r\n```log\r\n上面是问题\r\n所以这里是解答咯\r\n\r\n首先,我虽然喜欢钱(屁话,谁不喜欢)\r\n但是,我更愿意沉浸在自己的小世界里\r\n只要不愁吃穿,浪到哪是哪简直就是诗意的生活,\r\n在我的小世界里,左手是诗,右手是远方i like it \r\n\r\n如果非要说我浪费时间\r\n诚然,那是事实\r\n我是在用身体去记忆,通过物理上的重复来掌握知识 \r\n一定要我改的话\r\n那么我认为最需要改的就是这种笨拙的学习方法\r\n我希望我能从本质上去学习\r\n从原理上去理解\r\n而不是机械地去学习\r\n\r\n如何从本质,原理下手?\r\n我认为有两点:\r\n1. 官方文档\r\n2. 英语\r\n3. 计算机底层的协议\r\n\r\n```', '1', 'post', 'publish', 'none', 'default', '2', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('12', 'crond定时任务', null, '1502810395', '1502810744', '# 概念扫盲\r\n```log\r\n程序与进程\r\n程序:未运行\r\n进程:运行中,由cpu分配一个标识符pid(program id)\r\n\r\n=========================================================================================================\r\n前台运行 || 后台运行\r\n不需要交互的一般都会丢到后台去.\r\n如果程序不是默认后台执行,我们可以手动在后面加\"&\",吧进程丢到后台.\r\n\r\n举个栗子:\r\n查看运行在后台的ssh程序.\r\nsudo netstat -lntup|grep ssh\r\n[2017/8/15 20:40:14] tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1013/sshd           \r\n[2017/8/15 20:40:14] tcp6       0      0 :::22                   :::*                    LISTEN      1013/sshd\r\n如上所示,pid为1013\r\n\r\n像ssh这种一直生存着,基本上与系统共存亡的,我们一般称之为守护进程(服务)\r\n=========================================================================================================\r\n如何控制守护进程?\r\ncrond(crontab)\r\n与之类似的功能还有atd(当然这里他不是主角).\r\n\r\ncrond每分钟会去检查系统是否存在需要执行的任务,如果存在,那么就执行那些任务.\r\n没错,这货就是个定时器.\r\n想想看js中的internal,TMD的道理还是相同的.\r\n\r\ncrond对于秒无能为力\r\n真想用,那就自己写个shell,\r\n或者使用quartz(这是什么鬼东西啊,不认识)\r\n\r\n========================================================================================================\r\n定时任务的应用\r\n1. 举个栗子,备份\r\n2. 发邮件\r\n...\r\n=========================================================================================================\r\n定时任务分\r\n系统自带的定时任务\r\n自定义的定时任务\r\n\r\n=========================================================================================================\r\n```\r\n\r\n# cron的格式\r\n```log\r\nat\r\n\r\n绿叶1号\r\n适用于只执行一次的任务\r\n这货用的很少,基本没人用,了解即可\r\n我们写入的配置会被atd服务读取执行.\r\n\r\n\r\nanacron\r\n\r\n绿叶2号\r\n适应于非24小时开机的服务器执行的定时任务\r\n基本也是没人用\r\n\r\n\r\ncron\r\n\r\n红花\r\ncrond是一个服务\r\ncrontab是用户用来设置规则的\r\n常见的参数是\r\n-l  --list \r\n-e  --edit\r\ncorntab操作的文件是/var/spool/cron/${user}\r\n推荐使用crontab -e,因为有语法检查,当然了你有信心,直接该文件我也没意见\r\n\r\n用户的定时任务格式是7列\r\n系统的定时任务格式是8列,\r\n其实列数不重要,不同版本可能有差异,\r\n自己看着说明书搞就行了\r\n\r\ncrontab的格式如下(文件来自/etc/crontab)\r\nSHELL=/bin/bash\r\nPATH=/sbin:/bin:/usr/sbin:/usr/bin\r\nMAILTO=root\r\n\r\n# For details see man 4 crontabs\r\n\r\n# Example of job definition:\r\n# .---------------- minute (0 - 59)\r\n# |  .------------- hour (0 - 23)\r\n# |  |  .---------- day of month (1 - 31)\r\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\r\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\r\n# |  |  |  |  |\r\n# *  *  *  *  * user-name  command to be executed\r\n\r\n对应的是\" 分时日月周\"\r\n* 	任意值\r\n-	一段时间范围,栗子:5-10\r\n,	多个值之间的分割符,比如说:5,8,9,10\r\n/n	表示每隔n单位时间执行一次\r\n\r\n```\r\n# 实战\r\n```log\r\n小任务:\r\n每分钟打印一次自己的名字到指定文件中.\r\n\r\n解:\r\n添加文件\r\ntouch /home/guang/notes/test_crontab_result.log\r\n然后直接跑到/etc/crontab中添加一行数据\r\n*/1  *  *  *  * guang  echo \"huang guang da\" >> /home/guang/notes/test_crontab_result.log\r\n\r\n结果如下:\r\n➜  notes cat test_crontab_result.log\r\nhuang guang da\r\nhuang guang da\r\n\r\nnice\r\n但是有问题,/1是多余的,本来就是每分钟,画蛇添足了,大兄弟\r\n\r\n\r\n=========================================================================================================\r\n小任务:\r\n每天凌晨3点执行一个脚本(内容随意,本意是备份,现在改为输出名字吧)\r\n\r\n解:\r\n首先,添加touch /home/guang/notes/backup_result.log\r\n然后添加脚本/home/gaung/bin/backup.sh\r\nvi /home/gaung/bin/backup.sh\r\n# here is the shell use to finish back up task in 3:00 everyday \r\n# @author guang\r\n# @date 2017-08-15\r\necho \"huang guang da\" >> /home/guang/notes/backup_result.log\r\n\r\n最后,跑到/etc/crontab中添加一行数据\r\n*  3  *  *  * guang  /bin/sh /home/gaung/bin/backup.sh\r\n# 这里有两个要注意的点:1 使用sh来执行脚本;2 sh 和 脚本都要写全路径\r\n```', '1', 'post', 'publish', 'none', 'default', '5', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('13', 'http与www', null, '1502894658', '1502899381', '# http与www\r\n\r\n**推荐一本书http权威指南**\r\n\r\n## 网络\r\n```log\r\n# 网络: \r\n什么是ABCDE类网络我就不说了\r\n什么是网段,什么是IP我也不说了\r\n\r\n我们来说一下局域网\r\n局域网只有一个公网地址proxy,为什么能让所有的电脑都联网呢? \r\n事实上,当计算机A在网上冲浪的时候,它使用的就是公网地址,这个时候公网地址被A占用了\r\n为什么A上网时,BCD等其他也能上网,请参考cpu的时间片,公网被各个计算机之间轮着使用\r\n拥有公网的节点怎么就能区分出每一台计算机ABCDE他们谁是谁呢,请参考反向代理,使用端口,命名空间等来区分识别\r\n\r\n问: 那些地址可以拿来当局域网的地址(就是私有地址,就是公网上找不到的地址,公网只能先找到拥有公网地址的proxy,通过proxy找到你) \r\nA类地址中: 10.0.0.0到10.255.255.255可以拿来做私有地址\r\nB类地址中: 172.16.0.0到172.31.255.255\r\nC类地址中: 192.168.0.0到192.168.255.255\r\n\r\n看到这里,忍不住想起了公司的电脑的地址是172.30.72.247,草,难怪我在家访问不到\r\n然后,忍不住查了一下家里的地址192.168.0.100,草,难搞就不能给我一个公网玩玩嘛,宝宝不开心\r\n\r\n好吧,等我发财了我就跟你离婚,(╯‵□′)╯︵┻━┻ \r\n为什么公司用的是172开头,而我家里用的是192开头呢\r\n很明显,那是因为172开头能使用的ip更多啊 \r\n```\r\n\r\n## dns解释\r\n```log\r\n关于DNS \r\n\r\n以访问www.google.com举个栗子: \r\n1. 主机去本地DNSserver找对应ip, \r\n2. 找不到,去找根. \r\n3. 根可以老大,不管芝麻绿豆,只管理这13名大将,如com,org,cn等等\r\n4. 根DNS没有,但是他给出了提示,去找com这名大将(comDNSServer)\r\n5. 找到com,他也说没有,但是他又给出提示,他的小弟com.google有\r\n6. 历尽艰辛,找到com.google,终于找到www.google.com的ip\r\n7. 太累人了,放缓存里,心里想着如果访问频繁那就起大作用了,如果以后都不访问了那么找个时间把他从缓存中移除就是了,真TM机智\r\n```\r\n## http协议\r\n```log\r\n这是应用层的协议\r\n看计算机网络-自顶向下,玛德,各种各样的底层协议虐我千百遍\r\n受不了受不了~\r\n让时间来帮我理解这些石头吧,实在是长又丑\r\n\r\n不过http这种应用层的东西还是很可爱的很亲切的\r\n所有的www服务都必须遵守这种协议,所以http + www总是成双成对的.\r\nwww服务的默认端口是80\r\n加密的http协议https协议,实现这个协议的www服务的端口是443\r\n\r\nok,复习一下http的相关内容\r\n版本1.0(已经废弃)--每一次请求都重新建立一次连接,极大耗费资源\r\n版本1.1(链接一小会)--一次连接可以处理多个请求,\r\n\r\n1. 发起请求\r\n2. 查找dns解释\r\n3. 找到对应的服务器,建立连接,请求资源\r\n4. 服务器响应response\r\n5. 浏览器解释执行响应(比如说v8引擎去处理h5,js,css框架,etc等等)\r\n\r\n请求的格式:\r\n请求头\r\n消息头/一些参数\r\n空行\r\n请求体\r\n\r\n响应的格式\r\n响应头\r\n消息头/一些参数\r\n空行\r\n响应题(网页上可见内容)\r\n```\r\n\r\n## web的架构问题\r\n```log\r\n想不到会在这里看到urlrewrite\r\n\r\n本来是在讨论静态资源和动态资源的历史和区别等等这些内容的\r\n突然话锋一转\r\n静态效率高,但是维护成本更高,很笨拙\r\n动态效率下降,但是功能强大而灵活,但是这货不利于seo搜索引擎搜索\r\n于是提出了\"伪静态\"这个概念,就是我一直玩的urlrewrite这个玩意了,\r\n这货存在的意义就是修改url,使看的舒服,让seo搜索收录得到,其实一点卵用没有\r\n\r\n对阵web的架构如何优化\r\n如何提高动态资源的效率,没错,请参看freemarker\r\n就是对不经常改动的资源进行静态化,能够一定程度优化web的效率\r\n\r\n如何更进一步优化?\r\n使用消息队列来进行异步处理,保证效率的同时也确实把任务完成了\r\n但是需要小心高并发带来的一些问题:例如消息队列阻塞,消息可能丢弃等问题(猜测,错了别打脸)\r\n```\r\n', '1', 'post', 'publish', 'none', 'default', '12', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('14', '常见端口', null, '1502895602', '1502895602', '# 常见端口\r\n```log\r\n21 ftp\r\n22 ssh sftp\r\n25 smtp\r\n3306 mysql\r\n873 rsynx\r\n161 snmp\r\n111 rpc\r\n3389 window的远程桌面\r\n80 http\r\n53 dns\r\n443 https\r\n110 pop3\r\n```', '1', 'post', 'publish', '', '默认分类', '2', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('15', '唠叨', null, '1502975567', '1503849507', '# 如题,纯属于吹流弊\r\n\r\n## 学习计划\r\n```log\r\n册那,这个学习路线为什么是随意穿插的啊,好气啊\r\n+ java\r\n    ++ taotao\r\n        +++ ftp\r\n        +++ git\r\n+ linux\r\n+ mysql\r\n+ js\r\n+ python\r\n+ 汇编\r\n\r\n```\r\n\r\n## 关于任务\r\n```log\r\n1. 最低要求:完成任务,效果要出来\r\n2. upgrade:要理解,得心应手,举一反三,娓娓道来\r\n3. 注释,备注要充分,\r\n    你自己写的东西,你看不懂,那么你写的是垃圾\r\n    你自己写的东西自有你自己看得懂,能用但是缺乏可移植性\r\n    你自己写的大家一看就懂,可以,那是因为你已经是标准\r\n    所以,如果写一个任务用1小时,那么请你用三个小时去写注释,他比任务本身更重要\r\n4. 用心写注释,用脚写代码\r\n    \r\n```', '1', 'post', 'publish', 'none', 'default', '6', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('16', 'oldboy(1)--rsync同步', null, '1502976234', '1503768553', '# 备份备份--我挚爱的备份\r\n\r\n## 优秀的参考资料\r\n[参考资料1][1]\r\n\r\n\r\n## rsync\r\n```log\r\n\r\n@author guang\r\n@date 20170817\r\n@description: rsync的学习日志\r\n\r\nrysnc的模式\r\n1. 单个主机之间的数据传输	//此时类似于cp命令\r\n2. 借助rcp,ssh等通道传输数据	//此时类似scp命令\r\n3. 以守护进程(daemon)的方式传输数据(**重点**)	\r\n\r\n栗子:\r\n1. rsync -avz mysql2.sql sqls \r\n2. rsync -avz mysql2.sql guang@192.168.0.102:/home/guang/\r\n3. 重点:\r\n	+ 配置rsync sever\r\n		++ vi /etc/rsync.comf(包括的配置参数有:用户rsynx,共享目录,模块,虚拟用户,密码文件)\r\n		++ 创建共享目录/guang,\r\n		++ 创建rsync用户,授权访问/guang\r\n		++ 创建密码文件,并设置文件权限600,密码是明文,所以我们应当设置一下可视范围\r\n		++ 启动服务\"rsync --daemon\"\r\n	+ 配置rsync client\r\n		++ 直接执行rsync的指令进行推拉操作即可\r\n		++ 可以设置密码放在文件中,执行指令时自动读取文件,避免手动输入密码的麻烦(当然,设置可视权限600)\r\n#######################################################################################\r\n# @author guang\r\n# @date 20170818\r\n# @description: record the daily task \r\n1. config vi editor always show line number\r\n        + execute \"vim ~/.vimrc\" and then wirte \"set nu\" ,then it work \r\n2. config my rsync daemon\r\n        + config the conf flie \"/etc/rsyncd.conf\" .\r\n        + execute a commond \"rysnc --daemon\" to start the daemon process \r\n        + check the daemon \"rsyncd\"\r\n                ++ \"netstat -lntup|grep 873\"    //873 is the listening port of rsync\r\n                ++ \"ps -ef|grep rsync\"\r\n                ++ and you can check the log \"/var/log/rsync.log\"\r\n        + \"mkdir /guang -p\"     //crate the share path\r\n        + \"useradd rsync -s /sbin/nologin\"      //create a user for rsync\r\n        + \"chown -R rsync:rsync /guang\"         //config the owr and group for share path\r\n        + \"echo \"rsync_backup:guang\" > /etc/rsync.password\"     //config a virtual user and set his passwd is \"guang\" into the file \"/etc/rsync.password\"\r\n        + \"chmod 600 /etc/rsync.password\"       //due to his passwd is visable ,so wo chang the attribute of this file only this account can rw. \r\n        + then shutdown iptable/firewall and selinux,ok you can try it. \r\n                ++ \"vi /etc/selinux/config\" and \"setenforce 0\"\r\n                ++ \"systemctl stop firewalld\" and \"systemctl disable firewalld\"\r\n        + config the client and test pull and push operation\r\n                ++ \"echo \"guang\" > /etc/rsync.password\"         //config the passwd for the virtual user \"rsync_backup\"\r\n                ++ \"mkdir data\"         //ensure the directory u operate later is exist\r\n                ++ \"rsync -avz rsync_backup@192.168.0.102::guang /data\"         //this is the pull operation\r\n\r\n                ++ \"rsync -avz rsync_backup@192.168.0.102::guang /data --password-file=/etc/rsync.password\"     //do not need to key the passwd by hand \r\n                ++ \"rsync -avz /data rsync_backup@192.168.0.102::guang  --password-file=/etc/rsync.password\"    //and this is the push operation\r\n        \r\n#######################################################################################\r\n```\r\n\r\n```config\r\n# /etc/rsyncd: configuration file for rsync daemon mode\r\n\r\n# See rsyncd.conf man page for more options.\r\n\r\n# configuration example:\r\n\r\n# uid = nobody\r\n# gid = nobody\r\n# use chroot = yes\r\n# max connections = 4\r\n# pid file = /var/run/rsyncd.pid\r\n# exclude = lost+found/\r\n# transfer logging = yes\r\n# timeout = 900\r\n# ignore nonreadable = yes\r\n# dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2\r\n\r\n# [ftp]\r\n#        path = /home/ftp\r\n#        comment = ftp export area\r\n\r\n# @author guang\r\n# @date 20170818\r\n# @description: my config to rsyncd\r\n\r\n\r\nuid = rsync\r\ngid = rsync\r\nuse chroot = yes\r\nmax connections = 10\r\ntimeout = 300\r\npid file = /var/run/rsyncd.pid\r\nlock file = /var/run/rsync.lock\r\nlog file = /var/log/rsync.log\r\nexclude = lost+found/\r\ntransfer logging = yes\r\nignore nonreadable = yes\r\n\r\n# [] --> means module\r\n# path --> share path\r\n[guang]\r\npath = /guang/\r\nignore errors\r\nread only =false\r\nlist = false\r\nhosts allow 192.168.0.0/16\r\nauth users = rsync_backup\r\nsecrets file = /etc/rsync.password\r\n```\r\n\r\n```result log\r\nreceiving incremental file list\r\n./\r\n\r\nsent 66 bytes  received 99 bytes  66.00 bytes/sec\r\ntotal size is 0  speedup is 0.00 \r\n```\r\n\r\n\r\n  [1]: http://www.jianshu.com/p/0df0633613d8', '1', 'post', 'publish', 'none', 'default', '26', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('17', '淘淘商城(1)--搭建', null, '1503406792', '1503723614', '# 淘淘商城\r\n\r\n## 老规矩,先上废话\r\n```log\r\n马上离职了,发现自己什么都不会,(╯‵□′)╯︵┻━┻\r\n上个项目是古老的ssh,业务很混乱,代码很古老,跟纠缠不清的面条一样\r\n赶紧找个现成的项目暖暖手,顺便理清一下一个清晰的架构应该怎么搭建\r\n```\r\n## 项目的规划\r\n```log\r\n1. 既然是抄别人的项目,那就没什么好说的,首先先跟着别人把项目搭起来,把该有的代码填好~\r\n2. 然后写一个抄袭的抄后感\r\n3. 对项目进行改造,改成微服务形式,包括但不限于springboot; springcloud; docker\r\n```\r\n\r\n## 把别人的笔记先拷贝一份,避免以后笔记都找不着\r\n\r\n![分布式系统架构][1]\r\n```log\r\n分布式架构：\r\n把系统按照模块拆分成多个子系统。\r\n优点：\r\n1. 把模块拆分，使用接口通信，降低模块之间的耦合度。\r\n2. 把项目拆分成若干个子项目，不同的团队负责不同的子项目。\r\n3. 增加功能时只需要再增加一个子项目，调用其他系统的接口就可以。\r\n4. 可以灵活的进行分布式部署。\r\n\r\n\r\n选取的技术\r\n数据库：mysql\r\nDao层：mybatis、数据库连接池（德鲁伊druid）\r\n缓存：redis\r\n搜索：solr\r\nService层：spring\r\n表现层：springmvc、jstl、EasyUI、jsp、freemaker\r\n图片服务器：FastDFS（分布式文件系统）\r\n反向代理服务器：nginx\r\n定时器：Quartz\r\nWeb服务器：tomcat\r\n工程管理：maven\r\n\r\n\r\n开发工具和环境\r\nIDEA(Eclipse 4.5.0(Mars)，自带maven插件，需要手工安装svn插件。)\r\nMaven 3.3.3（开发工具自带）\r\nTomcat 7.0.53（Maven Tomcat Plugin）\r\nJDK 1.7\r\nMysql 5.6\r\nNginx 1.8.0\r\nRedis 3.0.0\r\nWin7 操作系统\r\nSVN（版本管理）\r\n\r\n后台管理系统搭建\r\n网站一般分前台和后台。前台给用户看后台是管理人员使用。\r\n\r\n使用maven管理工程。\r\n1、依赖管理\r\n2、项目构建\r\n后台创建一个独立的web工程。创建一个maven工程打包方式是war包。\r\n可以创建一个聚合工程，每个模块都是一个jar包，可以被其他系统依赖。\r\n\r\nTaotao-parent（父工程管理jar包的版本）\r\n  |--Taotao-common（把通用的工具类打包）\r\n  |--Taotao-manager（继承父工程）\r\n     	|-taotao-manager-pojo\r\n   		|-taotao-manager-dao\r\n  		 |-taotao-manager-service\r\n  		 |-taotao-manager-web（war包）\r\n\r\n各个module的pom配置略,请看源码\r\n\r\n\r\nssm框架的整合\r\n一、Dao层：整合mybatis和spring\r\n需要的jar包：\r\n1、mybatis的jar包\r\n2、Mysql数据库驱动\r\n3、数据库连接池\r\n4、Mybatis和spring的整合包。\r\n5、Spring的jar包\r\n配置文件：\r\n1、mybatis的配置文件：SqlMapConfig.xml\r\n2、Spring的配置文件：applicationContext-dao.xml\r\n1、数据源\r\n2、数据库连接池\r\n3、配置SqlSessionFactory（mybatis和spring整合包中的）\r\n4、配置mapper文件的扫描器。\r\n\r\n二、Service层：\r\n使用的jar包：spring的jar包。\r\n配置文件：applicationContext-service.xml\r\n配置一个包扫描器，扫描所有带@Service注解的类。\r\n\r\n事务配置：\r\n配置文件：applicationContext-trans.xml\r\n1、配置一个事务管理器\r\n2、配置tx\r\n3、配置切面\r\n\r\n三、表现层\r\n使用springmvc，需要使用springmvc和spring的jar包。\r\n配置文件：springmvc.xml\r\n1、配置注解驱动\r\n2、配置一个视图解析器。\r\n3、包扫描器，@Controller注解\r\n\r\nWeb.xml\r\n1、配置springmvc的前端控制器\r\n2、Spring容器初始化的listener。\r\n\r\n以上\r\n\r\n```\r\n\r\n  [1]: https://github.com/imshadowurlight/photo/blob/master/images/20170822_2143.png?raw=true', '1', 'post', 'publish', 'none', 'default', '6', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('18', '淘淘商城(2)--首页访问', null, '1503491843', '1503723604', '# 访问首页\r\n\r\n## 出现问题,无法加载静态资源(歪?歪?歪?)\r\n```log\r\n通过逻辑视图,配合试图解释器,找到了首页,但是css和js全都404,这是歪?歪?歪?,为什么静态资源会被拦截啊?\r\n\r\n解决方法是配置静态资源映射\r\n在springmvc.xml中配置    \r\n    <!--配置静态资源映射-->\r\n    <mvc:resources mapping=\"/js/**\" location=\"/js/\"/>\r\n    <mvc:resources mapping=\"/css/**\" location=\"/css/\"/>\r\n这个mvc的映射很给力,比如说,无法直接访问的WEB-INF下的文件,他也可以映射出来\r\n```\r\n\r\n## 显示商品\r\n```log\r\n1. 页面使用easyui指定url属性,\r\n2. 根据url请求指定路由,\r\n3. 由handler处理逻辑,\r\n4. 由逻辑视图+试图解释器返回物理视图\r\n\r\n//握草,轻轻松松实现多个页面跳转的逻辑,这让我工作中还在用的struts2情何以堪\r\n     /**@author guang\r\n     * @param page 路由参数,获取动态路由,并返回同名的逻辑视图\r\n     * */\r\n    @RequestMapping(\"/{page}\")\r\n    public String showPage(@PathVariable String page){\r\n        return page;\r\n    }\r\n\r\n5. 接着需要在handler处处理逻辑:分页获取商品集合\r\n分析:    \r\n    ++ 由于mabatis逆向生成的代码不提供分页功能\r\n    ++ 自己也很懒,不想写\r\n    ++ ok,mybatis提供一个分页插件(PageHelper,支持oracle&mysql&postgreSQL)\r\n    ++ 通过插件操作SQLSessionFactory --> SqlSession --> Executer执行器  \r\n--> (通过拦截器把执行器将要执行的sql拿出来添油加醋) \r\n--> MapperStatement(请参考preparedStatement,就是说,这货就是一个封装了的sql)\r\n\r\n6. 具体的分页操作+配置\r\n配置\r\n    ++ 在SqlMapConfig.xml中配置插件如下\r\n    <!--配置mybatis的分页插件-->\r\n    <plugins>\r\n        <plugin interceptor=\"com.github.pagehelper.PageHelper\">\r\n            <!--设置数据库类型(主要指的是方言,因为基本都遵守sql的规则)-->\r\n            <property name=\"dialect\" value=\"mysql\"/>\r\n        </plugin>\r\n    </plugins>\r\n    ++ 顺便看看源码,跟着源码配置就行了(马季马吧库内)\r\n============\r\npublic void setProperties(Properties p) {\r\n        String dialect = p.getProperty(\"dialect\");\r\n        this.SQLUTIL = new SqlUtil(dialect);\r\n        String offsetAsPageNum = p.getProperty(\"offsetAsPageNum\");\r\n        this.offsetAsPageNum = Boolean.parseBoolean(offsetAsPageNum);\r\n        String rowBoundsWithCount = p.getProperty(\"rowBoundsWithCount\");\r\n        this.rowBoundsWithCount = Boolean.parseBoolean(rowBoundsWithCount);\r\n        String pageSizeZero = p.getProperty(\"pageSizeZero\");\r\n        this.pageSizeZero = Boolean.parseBoolean(pageSizeZero);\r\n        String reasonable = p.getProperty(\"reasonable\");\r\n        this.reasonable = Boolean.parseBoolean(reasonable);\r\n    }\r\n============\r\n\r\n测试代码\r\n    @Test\r\n    public void testPageHelper(){\r\n        /*分析:\r\n        * 1. 获取mapper代理\r\n        * 2. 设置分页\r\n        * 3. 执行查询\r\n        * 4. 获取结果\r\n        * */\r\n        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"classpath:spring/applicationContext-*xml\");\r\n        TbItemMapper tbItemMapper = applicationContext.getBean(TbItemMapper.class);\r\n        PageHelper.startPage(1,30);//param1:第几页; param2:页面容量    //ctrl+q 或者直接去看源码   //这货就是我们的拦截器\r\n        TbItemExample tbItemExample = new TbItemExample();\r\n        List<TbItem> list= tbItemMapper.selectByExample(tbItemExample);//执行查询\r\n        PageInfo<TbItem> pageInfo = new PageInfo<TbItem>(list);//使用pageInfo对象来处理查询结果\r\n        long total = pageInfo.getTotal();\r\n        System.out.println(\"总记录数total:\"+total);\r\n        int pages = pageInfo.getPages();\r\n        System.out.println(\"总页数pages:\"+pages);\r\n        int pageSize = pageInfo.getPageSize();\r\n        int pageNum = pageInfo.getPageNum();\r\n        System.out.println(\"第几页pageNum:\"+pageNum+\";页面容量pageSize:\"+pageSize);\r\n    }\r\n\r\n输出结果\r\n    总记录数total:3096\r\n    总页数pages:104\r\n    第几页pageNum:1;页面容量pageSize:30\r\n```\r\n## 实际代码\r\n```log\r\n\r\npojo\r\npublic class EasyUIDataGridResult {\r\n\r\n    private long total;\r\n    private List<?> rows;\r\n\r\n    public long getTotal() {\r\n        return total;\r\n    }\r\n\r\n    public void setTotal(long total) {\r\n        this.total = total;\r\n    }\r\n\r\n    public List<?> getRows() {\r\n        return rows;\r\n    }\r\n\r\n    public void setRows(List<?> rows) {\r\n        this.rows = rows;\r\n    }\r\n\r\n    public EasyUIDataGridResult() {\r\n    }\r\n\r\n    public EasyUIDataGridResult(long total, List<?> rows) {\r\n        this.total = total;\r\n        this.rows = rows;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"EasyUIDataGridResult{\" +\r\n                \"total=\" + total +\r\n                \", rows=\" + rows +\r\n                \'}\';\r\n    }\r\n}\r\n\r\ncontroller\r\n    /**\r\n     * @param page 第几页\r\n     * @param rows 页面记录容量\r\n     * @return easyUIDataGridResult 页面响应数据\r\n     * */\r\n    @RequestMapping(\"/item/list\")\r\n    @ResponseBody\r\n    public EasyUIDataGridResult getItemList(Integer page, Integer rows){\r\n        /*\r\n        * 1.接收参数(页面采用easyui,由easyui文档得知此分页插件传递的参数为page + rows,)\r\n        *   @param page 第几页\r\n        *   @param rows 页面记录容量\r\n        * 2.响应的返回数据为json,格式为{total:\"${total}\",rows:\"${rows}\"}\r\n        *   @param total 总记录数\r\n        *   @param rows 记录集合\r\n        * 3.分析service层的实现\r\n        *   @param page\r\n        *   @param rows\r\n        *   @return pojo 创建一个包装类pojo作为返回值,此pojo格式参考响应数据json来创建\r\n        * */\r\n        EasyUIDataGridResult easyUIDataGridResult = itemService.getItemList(page,rows);\r\n        return easyUIDataGridResult;\r\n    }\r\n\r\nservice\r\n    @Override\r\n    public EasyUIDataGridResult getItemList(int page, int rows) {\r\n        //分页\r\n        PageHelper.startPage(page,rows);\r\n        //执行查询\r\n        TbItemExample tbItemExample = new TbItemExample();\r\n        List<TbItem> list = itemMapper.selectByExample(tbItemExample);\r\n        //使用PageInfo对象处理返回结果\r\n        PageInfo<TbItem> pageInfo = new PageInfo<TbItem>(list);\r\n        //返回结果格式处理\r\n        EasyUIDataGridResult easyUIDataGridResult = new EasyUIDataGridResult();\r\n        easyUIDataGridResult.setTotal(pageInfo.getTotal());\r\n        easyUIDataGridResult.setRows(list);\r\n        return easyUIDataGridResult;\r\n    }\r\n```\r\n\r\n', '1', 'post', 'publish', 'none', 'default', '15', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('19', '淘淘商城(3)--上传图片', null, '1503674713', '1503723593', '# 上传图片\r\n## 上传到本地(tomcat之类的容器,或者说项目内部)\r\n```log\r\n放到本地很简单,为什么要把图片单独放到一个/多个服务器里面\r\n方案来源于问题;\r\n当访问量大时,怎么办?\r\n--> 做集群,例如tomcat集群\r\n--> 上传的时候,只上传到一台服务器上,然后再让运维搞一个实时同步,例如rsync+inotify.\r\n--> 但是实际上做实时同步有点浪费资源了\r\n--> 这时候就涉及到一个微服务/SOA的概念,把图片服务从整个应用服务中脱离出来,作为一个可热插拔的组件,单独使用,方便,灵活,高效etc \r\nthat\'s all\r\n```\r\n\r\n## 使用单独的图片服务器\r\n```log\r\n可以选择的容器(比如实现了http协议的tomcat.apache,nginx)(如果你是用别的协议访问图片,那么也可以选则别的容器)\r\n关于nginx\r\n    + 这货是一个高性能的http服务器\r\n    + 这货是一个高性能的反向代理服务器\r\n        ++ 解释一下反向代理.\r\n        ++ 说到反向,那就先说一下正向.以一个局域网连接到公网为栗子,局域网内有n台普通主机,只有私有ip,然后有一台代理主机,他有公网地址,当我们普通主机\r\n        需要访问外网时,需要先访问代理主机,让代理主机帮我们访问外网.so ,this is proxy,(many-2-1)\r\n        ++ 接下来就是反向代理了\r\n        ++ 接着上面的假设,proxy 帮我们发送一个请求到外网,以访问google为栗子,由于google访问量惊人,google设置了多台服务器进行负载均衡,防止宕机\r\n        那么问题来了,那么多台服务区,我们访问的是那一台?\r\n        ++ 事实上,我们发出的请求那一台google服务器都不访问,他被google的代理服务器拦下来了,代理服务器监听各个服务器之间的负载,指定某一台服务器来最终处理我们的请求\r\n        ++ that is all (1-2-many).\r\n        ++ 总结,说到底,还是代理,只是跟一般的代理方式方向不一样,我们给他一个名号:反向代理\r\n安装nginx\r\n    + \r\n\r\n```', '1', 'post', 'publish', 'none', 'default', '9', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('20', 'linux服务软件(1)--nginx', null, '1503676986', '1503723568', '# nginx\r\n\r\n## 安装nginx\r\n```log\r\n先把别的乱七八糟的东西装上\r\nyum install -y gcc-c++\r\nyum install -y pcre pcre-devel \r\nyum install -y zlib zlib-devel\r\nyum install -y openssh openssh-devel\r\n\r\n+ 步骤\r\n    ++ 获取源码\r\n    ++ 解压\r\n    ++ 配置参数\r\n    ++ 编译链接\r\nwget http://nginx.org/download/nginx-1.12.0.tar.gz\r\ntar -zxvf nginx-1.12.0.tar.gz\r\n\r\n./configure \\\r\n--prefix=/usr/local/nginx \\\r\n--pid-path=/var/run/nginx/nginx.pid \\\r\n--lock-path=/var/lock/nginx.lock \\\r\n--error-log-path=/var/log/nginx/error.log \\\r\n--http-log-path=/var/log/nginx/access.log \\\r\n--with-http_gzip_static_module \\\r\n--http-client-body-temp-path=/var/temp/nginx/client \\\r\n--http-proxy-temp-path=/var/temp/nginx/proxy \\\r\n--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \\\r\n--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \\\r\n--http-scgi-temp-path=/var/temp/nginx/scgi\r\n\r\nmake\r\nmake install\r\n```\r\n\r\n## 启动\r\n```log\r\n启动并检查启动情况\r\n➜  sbin ./nginx \r\nnginx: [alert] could not open error log file: open() \"/var/log/nginx/error.log\" failed (13: Permission denied)\r\n2017/08/26 00:29:24 [emerg] 7176#0: mkdir() \"/var/temp/nginx/client\" failed (13: Permission denied)\r\n➜  sbin ll\r\ntotal 3.6M\r\n-rwxr-xr-x. 1 root root 3.6M Aug 26 00:27 nginx\r\n➜  sbin sudo ./nginx\r\n➜  sbin ps -aux|grep nginx\r\nroot       7188  0.0  0.0  20484   616 ?        Ss   00:29   0:00 nginx: master process ./nginx\r\nnobody     7191  0.0  0.1  23012  1380 ?        S    00:29   0:00 nginx: worker process\r\nguang      7203  0.0  0.0 112644   972 pts/0    S+   00:29   0:00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn nginx\r\n\r\n```\r\n\r\n## 停止服务,\r\n```log\r\n停止服务\r\n./nginx -s stop\r\n\r\n热部署配置\r\n./nginx -s reload\r\n```\r\n## 配置反向代理\r\n```log\r\n反向代理的实现原理:\r\n    + nginx通过模拟创建虚拟主机,配置端口,主机名,服务的根目录等等\r\n    + 然后映射到真正的服务器上,搞定\r\n配置cong/nginx.conf\r\n添加代码如下:\r\n    server {\r\n        listen       81; \r\n        server_name  localhost;\r\n        location / { \r\n            root   html81;\r\n            index  index.html index.htm;\r\n        }   \r\n    } \r\n添加根目录html81,\r\n\r\n然后重启发现,咦怎么访问不鸟?\r\n蓦然发现,玛德,我的81端口没有开放.\r\n```\r\n\r\n```log\r\n如果想要泛用80端口,那么可以使用域名来区别虚拟主机,\r\n配置如下\r\n    server {\r\n        listen       80;\r\n        server_name  www.guang.com;\r\n        location / {\r\n            root   html-test;\r\n            index  index.html index.htm;\r\n        }\r\n    }\r\nthat\'s all\r\n```\r\n```log\r\n一切准备就绪,开始搞反向代理\r\n1. 安装tomcats(数量随意)\r\n2. 别忘了修改以及开放端口\r\n3. 配置nginx.conf如下\r\n    upstream tomcats{\r\n        server 192.168.27.131:8081;\r\n        server 192.168.27.131:8082;\r\n        server 192.168.27.131:8083;\r\n    }\r\n    server {\r\n        listen       80;\r\n        server_name  www.tomcat1.com;\r\n        location / {\r\n            proxy_pass   http://tomcats;\r\n            index  index.html index.htm;\r\n        }\r\n    }\r\n\r\n4. 在客户端配置好DNS(穷的没饭吃,只能萌混过关)\r\n    + 192.168.27.131 www.tomcat1.com\r\n5. ok,愉快的访问吧,你会发现多次访问,访问到的是不同的tomcat,\r\n    + easy like drink \r\n6. 可以 server 192.168.27.131:8081 weight=3;简单指定服务器的权重\r\n    + 更多关于nginx的信息请google||查询官网(╯‵□′)╯︵┻━┻\r\n```\r\n\r\n', '1', 'post', 'publish', 'none', 'default', '31', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('22', 'oldboy(2)--rsync辅助组件inotify', null, '1503767520', '1503767520', '# 数据实时同步\r\n\r\n## 关于inotify\r\n```log\r\n# @author guang\r\n# @date  20170819\r\n# @description: practise inotify\r\n\r\n###########################################################################################  \r\n1. 为什么要使用inotify\r\n	+ 需求1:实时备份/实时同步数据.\r\n		++ 举个栗子:\r\n		++ 我想服务器上传一遍博文,数据保存在主服务器上\r\n		++ 由于服务器为了应对访问量高发而使用了反向代理,我上传完后检查博文,访问的是备份服务器.\r\n		++ 这就要求主与从服务器之间需要实时同步数据,不然我的访问就会出现异常\r\n	+ 需求2:增量同步数据\r\n		++ 当数据量大到一定程度以后,完整备份太耗时,不适用\r\n		++ 而增量备份,需要比对文件,也消耗大量时间\r\n		++ inotify则对比对文件这一相关方面做的不错,他的增量同步数据功能还可以.\r\n2. inotify的工作原理\r\n	+ inotify只运行在客户端\r\n	+ 设置inotify程序监控rsync的工作目录,当rsync的工作目录内容发生变更时,inotify就能够捕捉到变更的数据,\r\n	+ 并通知rsync执行同步指令把数据同步到服务器.\r\n3. inotify的实现\r\n	+ inotify实际上只是接口,或者说协议,或者说规范\r\n	+ 而实现了inotify接口的实现有\r\n		++ inotify	//比较简单\r\n		++ cersync	//功能比较强大,性能比较高\r\n		++ 不主流,不列出来了,有需要的话自己google\r\n		++ 可能有新的流弊的实现也说不定,总之与时俱进嘛,接口了解了管你怎么实现\r\n\r\n########################################################################################### \r\n```\r\n', '1', 'post', 'publish', 'none', 'default', '1', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('23', 'oldboy前言+总结', null, '1503768187', '1503768187', '# oldboy\r\n\r\n## 前言\r\n```log\r\n+ 时间:    不定时,穿插着学习,学到哪里是哪里,guang是风一样的勇士;\r\n+ 顺序:    没有顺序,学到哪里是哪里,guang是风一样的勇士;\r\n+ 目标:    当一名伟大的网管,我要断你们所有人的网,(╯‵□′)╯︵┻━┻\r\n+测试环境:    笔记本\r\n    ++ 每一个单独的功能使用单独的虚拟机来实现(我真的应该早点学习好docker,哪来那么虚拟机给我用啊)\r\n```\r\n\r\n## 后语||总结\r\n```log\r\n占位符\r\n```', '1', 'post', 'publish', 'none', 'default', '0', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('24', 'linux(-1)--配置静态ip', null, '1503771349', '1503771349', '# 额,我只是过来丢个连接就跑路了\r\n[配置静态ip][1]\r\n\r\n\r\n  [1]: https://linux.cn/article-3977-1.html', '1', 'post', 'publish', '', '默认分类', '1', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('25', 'linux服务软件(2)--vsftp', null, '1503843726', '1503846469', '# vsftp\r\n\r\n## 参考资料\r\n[参考资料][1]\r\n\r\n## 作用\r\n```log\r\n文件传输\r\n在这里,我拿来当做一个图片服务器(淘淘商城),anyway,他就是一个搬运工\r\n```\r\n\r\n## 安装搭建,配置\r\n```log\r\n+ yum install vsftpd\r\n+ 启动 systemctl start vsftpd.service\r\n+ 开机自启动 systemctl enable vsftpd.service\r\n\r\n做一些配置\r\n+ vim /etc/vsftpd/vsftpd.conf\r\n    ++ anonymous_enable=YES        //是否允许匿名用户登陆FTP。为了安全起见关闭这个功能（将等号后的YES改成NO即可）。\r\n    ++ dirmessage_enable=YES        //切换目录时，显示目录下.message文件中的内容默认是开启的\r\n    ++ local_umask=022                    //FTP上本地的文件权限，默认是077，不过vsftpd安装后的配置文件里默认是022.没有什么特殊情况不用修改。\r\n    ++ xferlog_enable=YES                //启用上传和下载的日志功能，默认开启。建议开启此功能，它可以对用户的操作进行日志记录，当出现问题的时候可以通过日志排查问题。\r\n    ++ ftpd_banner=XXXX                //FTP的欢迎信息。\r\n    ++ data_connection_timeout=120    //数据连接超时时间。如果在使用vsftpd上传下载碎小文件的时候容易发生超时中断的问题，可以将本行前的#注释符去掉，然后将120改成5或者更小，然后重启vsftpd即可。修改配置文件完成。保存后重启VSFTPD。\r\n    ++ systemctl restart vsftpd.service       //重启vsftpd服务\r\n\r\n+ 创建用户\r\n    ++ 添加一个名为ftpuser的用户，用户文件夹位置为：/var/www/html，且禁止此用户登陆服务器：\r\n    ++ useradd -d /var/www/html -s /sbin/nologin ftpuser\r\n    ++ 然后设置一下密码，为ftpuser设置密码：\r\n    ++ passwd ftpuser\r\n\r\n+ 开放防火墙的20端口\r\n    ++ sudo firewall-cmd --zone=public --add-port=21/tcp --permanent \r\n    ++ sudo firewall-cmd --reload\r\n    ++ sudo firewall-cmd --list-all\r\n\r\n+ 客户端连接vsftpd\r\n    ++ 使用xftp,但是怎么连都连不上,一直提示无法打开文件夹,(╯‵□′)╯︵┻━┻\r\n    ++ 使用xshell来打开xftp,擦那,一下就打开了.\r\n```\r\n\r\n\r\n  [1]: https://www.yanning.wang/archives/184.html', '1', 'post', 'publish', 'none', 'default', '18', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('26', 'linux服务软件(2)--firewall', null, '1503844673', '1503844725', '# firewall\r\n<del>还没有系统的学习防火墙,先把自己经常搜索使用的参考资料记录一下(╯‵□′)╯︵┻━┻</del>\r\n\r\n 1. [参考资料][1]\r\n\r\n\r\n\r\n\r\n  [1]: http://www.jianshu.com/p/bad33004bb4f', '1', 'post', 'publish', 'none', 'default', '4', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('27', 'linux服务软件(3)--nfs', null, '1504020510', '1504022769', '# nfs文件系统\r\n\r\n## nfs是什么\r\n```log\r\n+ 这货是一个网络文件系统network file system\r\n+ 为什么学习它? \r\n	++ 经典,有参靠价值\r\n	++ 现实中的一些小公司也在用(符合我现在的现状) \r\n	++ 后面有一大堆的分布式的网络文件系统,什么MFS,GFS,FastFS...太他么多了,这能需要用到时再去学,这里了解一下经典就行了. \r\n+ 应用\r\n	++ 应用于集群架构的应用\r\n	++ 比如图片/附件/音乐/视频etc   \r\n```\r\n\r\n## nfs的安装与配置\r\n```log\r\n+ nfs依赖rpc\r\n	++ 查询依赖,如不存在则优先下载安装(yum install -y nfs-utils rpcbind)\r\n	++ 查询rpc.service服务的状态,如果未运行,则优先启动服务\r\n	++ 查询nfs-server.service服务的状态,如果未运行,则优先启动服务\r\n	++ 以下为输出结果\r\n		➜  base rpm -qa |grep -i nfs\r\n		nfs-utils-1.3.0-0.33.el7_3.x86_64\r\n\r\n		➜  base rpm -qa |grep -i rpc \r\n		rpcbind-0.2.0-38.el7_3.x86_64\r\n\r\n		➜  base sudo systemctl status  rpcbind  \r\n		● rpcbind.service - RPC bind service\r\n		   Loaded: loaded (/usr/lib/systemd/system/rpcbind.service; indirect; vendor preset: enabled)\r\n		   Active: inactive (dead)\r\n\r\n		➜  base sudo systemctl start  rpcbind \r\n		➜  base sudo systemctl status  rpcbind\r\n		● rpcbind.service - RPC bind service\r\n		   Loaded: loaded (/usr/lib/systemd/system/rpcbind.service; indirect; vendor preset: enabled)\r\n		   Active: active (running) since Tue 2017-08-29 21:43:34 CST; 3s ago\r\n		  Process: 4293 ExecStart=/sbin/rpcbind -w $RPCBIND_ARGS (code=exited, status=0/SUCCESS)\r\n		 Main PID: 4294 (rpcbind)\r\n		   CGroup: /system.slice/rpcbind.service\r\n			   └─4294 /sbin/rpcbind -w\r\n\r\n		Aug 29 21:43:34 com.guang systemd[1]: Starting RPC bind service...\r\n		Aug 29 21:43:34 com.guang systemd[1]: Started RPC bind service.\r\n\r\n		➜  base sudo systemctl status nfs\r\n		● nfs-server.service - NFS server and services\r\n		   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; disabled; vendor preset: disabled)\r\n		   Active: inactive (dead)\r\n		➜  base sudo systemctl start nfs-server.service\r\n		➜  base sudo systemctl status nfs              \r\n		● nfs-server.service - NFS server and services\r\n		   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; disabled; vendor preset: disabled)\r\n		   Active: active (exited) since Tue 2017-08-29 21:50:01 CST; 3s ago\r\n		  Process: 4927 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)\r\n		  Process: 4926 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)\r\n		 Main PID: 4927 (code=exited, status=0/SUCCESS)\r\n		   CGroup: /system.slice/nfs-server.service\r\n\r\n		Aug 29 21:50:01 com.guang systemd[1]: Starting NFS server and services...\r\n		Aug 29 21:50:01 com.guang systemd[1]: Started NFS server and services.\r\n\r\n\r\n	++ 作死提个小问题,为什么要rpc注册,nfs直接开放端口不好吗\r\n	++ 下面列出启动rpc服务时在rpc上注册的开放的端口\r\n	++ 然后列出启动nfs服务后在rpc上注册的开放的端口,看到了么,多了十多个端口,nfs直接开放,那还得了谁他么记得住,吃饱了撑的吗\r\n		➜  base rpcinfo -p localhost\r\n		   program vers proto   port  service\r\n		    100000    4   tcp    111  portmapper\r\n		    100000    3   tcp    111  portmapper\r\n		    100000    2   tcp    111  portmapper\r\n		    100000    4   udp    111  portmapper\r\n		    100000    3   udp    111  portmapper\r\n		    100000    2   udp    111  portmapper\r\n\r\n		➜  base rpcinfo -p localhost                   \r\n		   program vers proto   port  service\r\n		    100000    4   tcp    111  portmapper\r\n		    100000    3   tcp    111  portmapper\r\n		    100000    2   tcp    111  portmapper\r\n		    100000    4   udp    111  portmapper\r\n		    100000    3   udp    111  portmapper\r\n		    100000    2   udp    111  portmapper\r\n		    100005    1   udp    892  mountd\r\n		    100005    1   tcp    892  mountd\r\n		    100005    2   udp    892  mountd\r\n		    100005    2   tcp    892  mountd\r\n		    100005    3   udp    892  mountd\r\n		    100005    3   tcp    892  mountd\r\n		    100024    1   udp    662  status\r\n		    100024    1   tcp    662  status\r\n		    100003    3   tcp   2049  nfs\r\n		    100003    4   tcp   2049  nfs\r\n		    100227    3   tcp   2049  nfs_acl\r\n		    100003    3   udp   2049  nfs\r\n		    100003    4   udp   2049  nfs\r\n		    100227    3   udp   2049  nfs_acl\r\n		    100021    1   udp  42135  nlockmgr\r\n		    100021    3   udp  42135  nlockmgr\r\n		    100021    4   udp  42135  nlockmgr\r\n		    100021    1   tcp  15551  nlockmgr\r\n		    100021    3   tcp  15551  nlockmgr\r\n		    100021    4   tcp  15551  nlockmgr\r\n\r\n	++ 最后设置一下开机自启动,设置完以后记得review\r\n	++ 以下是输出结果\r\n		➜  base sudo systemctl enable rpcbind.service\r\n		➜  base sudo systemctl enable nfs-server.service\r\n\r\n		➜  base sudo systemctl status  rpcbind          \r\n		● rpcbind.service - RPC bind service\r\n		   Loaded: loaded (/usr/lib/systemd/system/rpcbind.service; indirect; vendor preset: enabled)\r\n		   Active: active (running) since Tue 2017-08-29 21:43:34 CST; 17min ago\r\n		 Main PID: 4294 (rpcbind)\r\n		   CGroup: /system.slice/rpcbind.service\r\n			   └─4294 /sbin/rpcbind -w\r\n\r\n		Aug 29 21:43:34 com.guang systemd[1]: Starting RPC bind service...\r\n		Aug 29 21:43:34 com.guang systemd[1]: Started RPC bind service.\r\n		➜  base sudo systemctl status nfs               \r\n		● nfs-server.service - NFS server and services\r\n		   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; enabled; vendor preset: disabled)\r\n		   Active: active (exited) since Tue 2017-08-29 21:50:01 CST; 11min ago\r\n		 Main PID: 4927 (code=exited, status=0/SUCCESS)\r\n		   CGroup: /system.slice/nfs-server.service\r\n\r\n		Aug 29 21:50:01 com.guang systemd[1]: Starting NFS server and services...\r\n		Aug 29 21:50:01 com.guang systemd[1]: Started NFS server and services.\r\n```\r\n\r\n\r\n## server设置共享目录,并放一些文件来测试\r\n```log	\r\n        ++ 以下为输出结果\r\n\r\n		➜  / sudo mkdir nfsdata\r\n		➜  /nfsdata sudo rz -E\r\n		➜  /nfsdata ls -l                                                                                                                   \r\n		total 15956\r\n		-rw-r--r--. 1 root root 7778670 Mar 15  2015 201708261536.jpg\r\n		-rw-r--r--. 1 root root 1137438 Mar 17  2015 201708261636.jpg\r\n		-rw-r--r--. 1 root root 2064887 Mar 19  2015 201708261637.jpg\r\n		-rw-r--r--. 1 root root  844812 Mar 18  2015 201708292200.jpg\r\n		-rw-r--r--. 1 root root 4501353 Apr 19  2015 201708292233.jpg\r\n\r\n	++ 配置/etc/exports文件\r\n\r\n		➜  /etc cat exports\r\n		###directory  hotsid(parameters)\r\n		###for example(use my window id)\r\n		/tmp	*(rw,async,root_squash,anonuid=1001,anongid=1001)\r\n\r\n\r\n		# @author guang\r\n		# @date 2017-08-29  \r\n		# @desc 配置nfs的共享目录,配置网段/用户的属性权限etc\r\n		/nfsdata    192.168.27.0/24(rw,sync)\r\n\r\n		➜  /etc sudo systemctl reload nfs-server.service\r\n		➜  /etc sudo systemctl status nfs-server.service\r\n		● nfs-server.service - NFS server and services\r\n		   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; enabled; vendor preset: disabled)\r\n		   Active: active (exited) since Tue 2017-08-29 21:50:01 CST; 1h 1min ago\r\n		  Process: 6554 ExecReload=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)\r\n		 Main PID: 4927 (code=exited, status=0/SUCCESS)\r\n\r\n		Aug 29 21:50:01 com.guang systemd[1]: Starting NFS server and services...\r\n		Aug 29 21:50:01 com.guang systemd[1]: Started NFS server and services.\r\n		Aug 29 22:51:47 com.guang systemd[1]: Reloaded NFS server and services.\r\n\r\n	++ server端检查当前服务器是否有共享目录\r\n	++ client端检查当前服务器是否有共享目录\r\n	++ 以下为输出结果\r\n		\r\n		--1\r\n		server:\r\n		➜  /etc showmount -e localhost\r\n		Export list for localhost:\r\n		/tmp     *\r\n		/nfsdata 192.168.27.0/24\r\n\r\n		--2\r\n		client:(一直报错,无奈,需要开放的端口实在太多了,只好关掉防火墙一劳永逸,绿林好汉请放过,本萌新只是测试,快走开,不要欺负我)\r\n		➜  / sudo showmount -e 192.168.27.132\r\n		clnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host)\r\n		\r\n		--3\r\n		➜  /etc sudo systemctl status firewalld\r\n		● firewalld.service - firewalld - dynamic firewall daemon\r\n		   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)\r\n		   Active: active (running) since Tue 2017-08-29 20:28:38 CST; 2h 39min ago\r\n		     Docs: man:firewalld(1)\r\n		 Main PID: 728 (firewalld)\r\n		   CGroup: /system.slice/firewalld.service\r\n			   └─728 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid\r\n\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete FORWARD --destination 192.168.122.0/24 --out-interface virbr0 --match conntrack --ctstate ESTABLISHED,RELATED --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete FORWARD --source 192.168.122.0/24 --in-interface virbr0 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete FORWARD --in-interface virbr0 --out-interface virbr0 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete FORWARD --out-interface virbr0 --jump REJECT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete FORWARD --in-interface virbr0 --jump REJECT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete INPUT --in-interface virbr0 --protocol udp --destination-port 53 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete INPUT --in-interface virbr0 --protocol tcp --destination-port 53 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete OUTPUT --out-interface virbr0 --protocol udp --destination-port 68 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete INPUT --in-interface virbr0 --protocol udp --destination-port 67 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete INPUT --in-interface virbr0 --protocol tcp --destination-port 67 --jump ACCEPT\' failed:\r\n		➜  /etc sudo systemctl stop firewalld.service\r\n		➜  /etc sudo systemctl status firewalld.service\r\n		● firewalld.service - firewalld - dynamic firewall daemon\r\n		   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)\r\n		   Active: inactive (dead) since Tue 2017-08-29 23:08:42 CST; 5s ago\r\n		     Docs: man:firewalld(1)\r\n		 Main PID: 728 (code=exited, status=0/SUCCESS)\r\n\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete FORWARD --in-interface virbr0 --out-interface virbr0 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete FORWARD --out-interface virbr0 --jump REJECT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete FORWARD --in-interface virbr0 --jump REJECT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete INPUT --in-interface virbr0 --protocol udp --destination-port 53 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete INPUT --in-interface virbr0 --protocol tcp --destination-port 53 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete OUTPUT --out-interface virbr0 --protocol udp --destination-port 68 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete INPUT --in-interface virbr0 --protocol udp --destination-port 67 --jump ACCEPT\' failed:\r\n		Aug 29 23:05:01 com.guang firewalld[728]: WARNING: COMMAND_FAILED: \'/usr/sbin/iptables -w2 -w --table filter --delete INPUT --in-interface virbr0 --protocol tcp --destination-port 67 --jump ACCEPT\' failed:\r\n		Aug 29 23:08:42 com.guang systemd[1]: Stopping firewalld - dynamic firewall daemon...\r\n		Aug 29 23:08:42 com.guang systemd[1]: Stopped firewalld - dynamic firewall daemon.\r\n			\r\n		--4(终于看到我想要的结果了)\r\n		➜  / sudo showmount -e 192.168.27.132\r\n		Export list for 192.168.27.132:\r\n		/tmp     *\r\n		/nfsdata 192.168.27.0/24\r\n```\r\n\r\n## 挂载共享目录\r\n```log\r\n	++ 挂载共享目录\r\n	++ 以下为输出结果\r\n\r\n		➜  /mnt sudo mount -t nfs 192.168.27.132:/nfsdata /mnt\r\n		➜  /mnt ls\r\n		➜  /mnt df -h\r\n		Filesystem               Size  Used Avail Use% Mounted on\r\n		/dev/mapper/centos-root   38G  6.2G   32G  17% /\r\n		devtmpfs                 473M     0  473M   0% /dev\r\n		tmpfs                    489M     0  489M   0% /dev/shm\r\n		tmpfs                    489M  7.0M  482M   2% /run\r\n		tmpfs                    489M     0  489M   0% /sys/fs/cgroup\r\n		/dev/sda1                497M  222M  275M  45% /boot\r\n		tmpfs                     98M     0   98M   0% /run/user/1000\r\n		192.168.27.132:/nfsdata   38G  5.9G   32G  16% /mnt\r\n		➜  /mnt ls -al\r\n		total 4\r\n		drwxr-xr-x.  2 root root    6 Nov  5  2016 .\r\n		dr-xr-xr-x. 19 root root 4096 Aug 18 23:24 ..\r\n		➜  /mnt cd ..\r\n		➜  / cd /mnt\r\n		➜  /mnt ls\r\n		201708261536.jpg  201708261636.jpg  201708261637.jpg  201708292200.jpg  201708292233.jpg\r\n		➜  /mnt ls -al \r\n		total 15964\r\n		drwxr-xr-x.  2 root root    4096 Aug 29 22:38 .\r\n		dr-xr-xr-x. 19 root root    4096 Aug 18 23:24 ..\r\n		-rw-r--r--.  1 root root 7778670 Mar 15  2015 201708261536.jpg\r\n		-rw-r--r--.  1 root root 1137438 Mar 17  2015 201708261636.jpg\r\n		-rw-r--r--.  1 root root 2064887 Mar 19  2015 201708261637.jpg\r\n		-rw-r--r--.  1 root root  844812 Mar 18  2015 201708292200.jpg\r\n		-rw-r--r--.  1 root root 4501353 Apr 19  2015 201708292233.jpg\r\n\r\n```\r\n## 问题来了\r\n```log\r\n+ 我在客户端建立一个文件,提示没权限,what the fuck\r\n+ 不让操作,那么这个鬼东西还有个蛋蛋用啊\r\n+ 于是操作一番如下\r\n	++ 修改server下的共享目录权限,设置为777\r\n	++ 以下为输出结果\r\n		\r\n		➜  / sudo chmod +777 /nfsdata\r\n		➜  / sudo ls -ld nfsdata     \r\n		drwxrwxrwx. 2 root root 4096 Aug 29 23:22 nfsdata\r\n\r\n		➜  /mnt touch helloworldtoo.txt\r\n		➜  /mnt ls -al \r\n		total 15964\r\n		drwxrwxrwx.  2 root  root     4096 Aug 29 23:41 .\r\n		dr-xr-xr-x. 19 root  root     4096 Aug 18 23:24 ..\r\n		-rw-r--r--.  1 root  root  7778670 Mar 15  2015 201708261536.jpg\r\n		-rw-r--r--.  1 root  root  1137438 Mar 17  2015 201708261636.jpg\r\n		-rw-r--r--.  1 root  root  2064887 Mar 19  2015 201708261637.jpg\r\n		-rw-r--r--.  1 root  root   844812 Mar 18  2015 201708292200.jpg\r\n		-rw-r--r--.  1 root  root  4501353 Apr 19  2015 201708292233.jpg\r\n		-rw-rw-r--.  1 guang guang       0 Aug 29 23:41 helloworldtoo.txt\r\n		-rw-r--r--.  1 root  root        0 Aug 29 23:22 helloworld.txt\r\n	\r\n	++ 分析上面的输出,发现了有趣的事,猜测\r\n		++ 新建文件,所有者和所属组分别是guang和guang\r\n		++ 而oldboy的所有者和所属组分别是nfsnobody和nfsnobody\r\n		++ 这是因为在client上guang在操作\r\n		++ 而server上同样有一个guang的用户\r\n		++ client上的guang获得了server上的guang的权限执行操作,\r\n		++ server上guang对于/nfsdata是属于other,但是因为/nfsdata已经被修改为777,因此文件创建成功\r\n		-- oldboy使用的client上的用户在server上不存在,于是被默认为匿名账户nfsnobody进行操作\r\n		-- 匿名账户由nfs配置指定\r\n		-- 由于他也把/nfsdata修改为777\r\n		-- 所以他也修改成功了,文件所有者与所有组为匿名用户nfsnobody和匿名组nfsnobody\r\n	\r\n	++ 到nfs的配置里去看个明白\r\n		➜  nfs cat etab\r\n		/nfsdata	192.168.27.0/24(rw,sync,wdelay,hide,nocrossmnt,secure,root_squash,no_all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid=65534,anongid=65534,sec=sys,rw,secure,root_squash,no_all_squash)\r\n		/tmp	*(rw,async,wdelay,hide,nocrossmnt,secure,root_squash,no_all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid=1001,anongid=1001,sec=sys,rw,secure,root_squash,no_all_squash)\r\n		➜  nfs pwd\r\n		/var/lib/nfs\r\n	++ 尴尬地发现配置文件指定了1001作为匿名用户和匿名组\r\n	++ 这个1001就是guang,阿西吧,我的猜测炸了\r\n\r\n+ 改回正途\r\n	++ 把server上的共享目录改回755\r\n	++ 共享目录的用户和组设置为默认的匿名用户guang(谁他么都是匿名用户,谁他么都是共享目录的master,爱怎么操作怎么操作)\r\n\r\n```\r\n', '1', 'post', 'publish', 'none', 'default', '5', '0', '1', '1', '1');

-- ----------------------------
-- Table structure for t_logs
-- ----------------------------
DROP TABLE IF EXISTS `t_logs`;
CREATE TABLE `t_logs` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `action` varchar(100) DEFAULT NULL,
  `data` varchar(2000) DEFAULT NULL,
  `author_id` int(10) DEFAULT NULL,
  `ip` varchar(20) DEFAULT NULL,
  `created` int(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_logs
-- ----------------------------
INSERT INTO `t_logs` VALUES ('1', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502195003');
INSERT INTO `t_logs` VALUES ('2', '删除文章', '2', '1', '0:0:0:0:0:0:0:1', '1502196630');
INSERT INTO `t_logs` VALUES ('3', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502203783');
INSERT INTO `t_logs` VALUES ('4', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502206289');
INSERT INTO `t_logs` VALUES ('5', '登录后台', null, '1', '127.0.0.1', '1502283811');
INSERT INTO `t_logs` VALUES ('6', '登录后台', null, '1', '127.0.0.1', '1502286909');
INSERT INTO `t_logs` VALUES ('7', '登录后台', null, '1', '127.0.0.1', '1502291036');
INSERT INTO `t_logs` VALUES ('8', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502369666');
INSERT INTO `t_logs` VALUES ('9', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502372758');
INSERT INTO `t_logs` VALUES ('10', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502456004');
INSERT INTO `t_logs` VALUES ('11', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502805522');
INSERT INTO `t_logs` VALUES ('12', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502810267');
INSERT INTO `t_logs` VALUES ('13', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502894359');
INSERT INTO `t_logs` VALUES ('14', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502975120');
INSERT INTO `t_logs` VALUES ('15', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503110022');
INSERT INTO `t_logs` VALUES ('16', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503406259');
INSERT INTO `t_logs` VALUES ('17', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503408806');
INSERT INTO `t_logs` VALUES ('18', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503491487');
INSERT INTO `t_logs` VALUES ('19', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503500395');
INSERT INTO `t_logs` VALUES ('20', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503674035');
INSERT INTO `t_logs` VALUES ('21', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503711034');
INSERT INTO `t_logs` VALUES ('22', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503716838');
INSERT INTO `t_logs` VALUES ('23', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503723042');
INSERT INTO `t_logs` VALUES ('24', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503765798');
INSERT INTO `t_logs` VALUES ('25', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503766357');
INSERT INTO `t_logs` VALUES ('26', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503766606');
INSERT INTO `t_logs` VALUES ('27', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503771254');
INSERT INTO `t_logs` VALUES ('28', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503840661');
INSERT INTO `t_logs` VALUES ('29', '删除文章', '21', '1', '0:0:0:0:0:0:0:1', '1503842693');
INSERT INTO `t_logs` VALUES ('30', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503849314');
INSERT INTO `t_logs` VALUES ('31', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1504020329');
INSERT INTO `t_logs` VALUES ('32', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1504022751');

-- ----------------------------
-- Table structure for t_metas
-- ----------------------------
DROP TABLE IF EXISTS `t_metas`;
CREATE TABLE `t_metas` (
  `mid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `slug` varchar(200) DEFAULT NULL,
  `type` varchar(32) NOT NULL DEFAULT '',
  `description` varchar(200) DEFAULT NULL,
  `sort` int(10) unsigned DEFAULT '0',
  `parent` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`mid`),
  KEY `slug` (`slug`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_metas
-- ----------------------------
INSERT INTO `t_metas` VALUES ('1', 'default', null, 'category', null, '0', '0');
INSERT INTO `t_metas` VALUES ('6', 'my github', 'https://github.com/ZHENFENG13', 'link', null, '0', '0');
INSERT INTO `t_metas` VALUES ('7', '目录', '目录', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('8', 'linux', 'linux', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('9', '应用', '应用', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('10', '默认分类', '默认分类', 'category', null, '0', '0');
INSERT INTO `t_metas` VALUES ('11', 'none', 'none', 'tag', null, '0', '0');

-- ----------------------------
-- Table structure for t_options
-- ----------------------------
DROP TABLE IF EXISTS `t_options`;
CREATE TABLE `t_options` (
  `name` varchar(32) NOT NULL DEFAULT '',
  `value` varchar(1000) DEFAULT '',
  `description` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_options
-- ----------------------------
INSERT INTO `t_options` VALUES ('allow_install', '0', '');
INSERT INTO `t_options` VALUES ('site_description', '13 Blog', null);
INSERT INTO `t_options` VALUES ('site_keywords', '13 Blog', null);
INSERT INTO `t_options` VALUES ('site_theme', 'default', null);
INSERT INTO `t_options` VALUES ('site_title', 'My Blog', '');
INSERT INTO `t_options` VALUES ('social_github', '', null);
INSERT INTO `t_options` VALUES ('social_twitter', '', null);
INSERT INTO `t_options` VALUES ('social_weibo', '', null);
INSERT INTO `t_options` VALUES ('social_zhihu', '', null);

-- ----------------------------
-- Table structure for t_relationships
-- ----------------------------
DROP TABLE IF EXISTS `t_relationships`;
CREATE TABLE `t_relationships` (
  `cid` int(10) unsigned NOT NULL,
  `mid` int(10) unsigned NOT NULL,
  PRIMARY KEY (`cid`,`mid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_relationships
-- ----------------------------
INSERT INTO `t_relationships` VALUES ('3', '1');
INSERT INTO `t_relationships` VALUES ('3', '7');
INSERT INTO `t_relationships` VALUES ('4', '1');
INSERT INTO `t_relationships` VALUES ('4', '8');
INSERT INTO `t_relationships` VALUES ('5', '1');
INSERT INTO `t_relationships` VALUES ('5', '9');
INSERT INTO `t_relationships` VALUES ('6', '1');
INSERT INTO `t_relationships` VALUES ('6', '8');
INSERT INTO `t_relationships` VALUES ('7', '1');
INSERT INTO `t_relationships` VALUES ('7', '8');
INSERT INTO `t_relationships` VALUES ('8', '1');
INSERT INTO `t_relationships` VALUES ('8', '8');
INSERT INTO `t_relationships` VALUES ('9', '1');
INSERT INTO `t_relationships` VALUES ('9', '8');
INSERT INTO `t_relationships` VALUES ('10', '1');
INSERT INTO `t_relationships` VALUES ('10', '8');
INSERT INTO `t_relationships` VALUES ('11', '1');
INSERT INTO `t_relationships` VALUES ('11', '11');
INSERT INTO `t_relationships` VALUES ('12', '1');
INSERT INTO `t_relationships` VALUES ('12', '11');
INSERT INTO `t_relationships` VALUES ('13', '1');
INSERT INTO `t_relationships` VALUES ('13', '11');
INSERT INTO `t_relationships` VALUES ('14', '10');
INSERT INTO `t_relationships` VALUES ('15', '1');
INSERT INTO `t_relationships` VALUES ('15', '11');
INSERT INTO `t_relationships` VALUES ('16', '1');
INSERT INTO `t_relationships` VALUES ('16', '11');
INSERT INTO `t_relationships` VALUES ('17', '1');
INSERT INTO `t_relationships` VALUES ('17', '11');
INSERT INTO `t_relationships` VALUES ('18', '1');
INSERT INTO `t_relationships` VALUES ('18', '11');
INSERT INTO `t_relationships` VALUES ('19', '1');
INSERT INTO `t_relationships` VALUES ('19', '11');
INSERT INTO `t_relationships` VALUES ('20', '1');
INSERT INTO `t_relationships` VALUES ('20', '11');
INSERT INTO `t_relationships` VALUES ('22', '1');
INSERT INTO `t_relationships` VALUES ('22', '11');
INSERT INTO `t_relationships` VALUES ('23', '1');
INSERT INTO `t_relationships` VALUES ('23', '11');
INSERT INTO `t_relationships` VALUES ('24', '10');
INSERT INTO `t_relationships` VALUES ('25', '1');
INSERT INTO `t_relationships` VALUES ('25', '11');
INSERT INTO `t_relationships` VALUES ('26', '1');
INSERT INTO `t_relationships` VALUES ('26', '11');
INSERT INTO `t_relationships` VALUES ('27', '1');
INSERT INTO `t_relationships` VALUES ('27', '11');

-- ----------------------------
-- Table structure for t_users
-- ----------------------------
DROP TABLE IF EXISTS `t_users`;
CREATE TABLE `t_users` (
  `uid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(32) DEFAULT NULL,
  `password` varchar(64) DEFAULT NULL,
  `email` varchar(200) DEFAULT NULL,
  `home_url` varchar(200) DEFAULT NULL,
  `screen_name` varchar(32) DEFAULT NULL,
  `created` int(10) unsigned DEFAULT '0',
  `activated` int(10) unsigned DEFAULT '0',
  `logged` int(10) unsigned DEFAULT '0',
  `group_name` varchar(16) DEFAULT 'visitor',
  PRIMARY KEY (`uid`),
  UNIQUE KEY `name` (`username`),
  UNIQUE KEY `mail` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_users
-- ----------------------------
INSERT INTO `t_users` VALUES ('1', 'admin', 'a66abb5684c45962d887564f08346e8d', '1034683568@qq.com', null, 'admin', '1490756162', '0', '0', 'visitor');
