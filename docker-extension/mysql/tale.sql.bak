/*
Navicat MySQL Data Transfer

Source Server         : 192.168.126.136
Source Server Version : 50636
Source Host           : 192.168.126.136:3306
Source Database       : tale

Target Server Type    : MYSQL
Target Server Version : 50636
File Encoding         : 65001

Date: 2017-08-31 13:01:53
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for `t_attach`
-- ----------------------------
DROP TABLE IF EXISTS `t_attach`;
CREATE TABLE `t_attach` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `fname` varchar(100) NOT NULL DEFAULT '',
  `ftype` varchar(50) DEFAULT '',
  `fkey` varchar(100) NOT NULL DEFAULT '',
  `author_id` int(10) DEFAULT NULL,
  `created` int(10) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_attach
-- ----------------------------
INSERT INTO `t_attach` VALUES ('1', 'schema.sql', 'file', '/upload/2017/07/6miji5iuigh1gqd4se0r8fga4b.sql', '1', '1501138916');

-- ----------------------------
-- Table structure for `t_comments`
-- ----------------------------
DROP TABLE IF EXISTS `t_comments`;
CREATE TABLE `t_comments` (
  `coid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cid` int(10) unsigned DEFAULT '0',
  `created` int(10) unsigned DEFAULT '0',
  `author` varchar(200) DEFAULT NULL,
  `author_id` int(10) unsigned DEFAULT '0',
  `owner_id` int(10) unsigned DEFAULT '0',
  `mail` varchar(200) DEFAULT NULL,
  `url` varchar(200) DEFAULT NULL,
  `ip` varchar(64) DEFAULT NULL,
  `agent` varchar(200) DEFAULT NULL,
  `content` text,
  `type` varchar(16) DEFAULT 'comment',
  `status` varchar(16) DEFAULT 'approved',
  `parent` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`coid`),
  KEY `cid` (`cid`),
  KEY `created` (`created`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_comments
-- ----------------------------
INSERT INTO `t_comments` VALUES ('1', '3', '1501131628', '热心网友', '0', '1', '', '', '0:0:0:0:0:0:0:1', null, 'test comment', 'comment', 'approved', '0');
INSERT INTO `t_comments` VALUES ('2', '2', '1501146109', 'faker', '0', '1', 'faker@gmail.com', 'https://www.google.com/ncr', '0:0:0:0:0:0:0:1', null, 'here i can do everything.', 'comment', 'approved', '0');
INSERT INTO `t_comments` VALUES ('3', '2', '1501146174', 'solofeng', '0', '1', 'solofeng@gmail.com', 'https://www.google.com/ncr', '0:0:0:0:0:0:0:1', null, 'my best hero is catalina.', 'comment', 'approved', '0');

-- ----------------------------
-- Table structure for `t_contents`
-- ----------------------------
DROP TABLE IF EXISTS `t_contents`;
CREATE TABLE `t_contents` (
  `cid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL,
  `slug` varchar(200) DEFAULT NULL,
  `created` int(10) unsigned DEFAULT '0',
  `modified` int(10) unsigned DEFAULT '0',
  `content` text COMMENT '内容文字',
  `author_id` int(10) unsigned DEFAULT '0',
  `type` varchar(16) DEFAULT 'post',
  `status` varchar(16) DEFAULT 'publish',
  `tags` varchar(200) DEFAULT NULL,
  `categories` varchar(200) DEFAULT NULL,
  `hits` int(10) unsigned DEFAULT '0',
  `comments_num` int(10) unsigned DEFAULT '0',
  `allow_comment` tinyint(1) DEFAULT '1',
  `allow_ping` tinyint(1) DEFAULT '1',
  `allow_feed` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`cid`),
  UNIQUE KEY `slug` (`slug`),
  KEY `created` (`created`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_contents
-- ----------------------------
INSERT INTO `t_contents` VALUES ('1', 'about my blog', 'about', '1487853610', '1487872488', '### Hello World\r\n\r\nabout me\r\n\r\n### ...\r\n\r\n...', '1', 'page', 'publish', null, null, '0', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('5', 'mysql导入与导出数据', null, '1501144621', '1501146751', '# 实现逻辑与数据分离	\r\n\r\n	--将本机数据库导出;\r\n	--mysqldump -uroot -p guang user > F:\\BaiduNetdiskDownload\\mysql_script\\local.sql\r\n			\r\n	--导入到服务器数据库;\r\n	--mysql -uroot -p进入mysql环境\r\n	--然后执行source /home/guang/Documents/local.sql\r\n    	\r\n	\r\n	\r\n	\r\n	\r\n\r\n', '1', 'post', 'publish', 'mysql,database', 'default', '13', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('6', '将java web项目部署到服务器', null, '1501144726', '1501725644', '# 安装jdk\r\n	vi /etc/profile\r\n	\r\n	export JAVA_HOME=/wocloud/java/jdk1.7.0_79 \r\n	export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar \r\n	export PATH=$PATH:$JAVA_HOME/bin\r\n	\r\n	source /etc/profile	\r\n\r\n# 安装tomcat\r\n	安装的位置:/usr/local/tomcat\r\n	设置防火墙开放8080端口\r\n	firewall-cmd --zone=public --add-port=8080/tcp --permanent\r\n	\r\n	那怎么开启一个端口呢\r\n	添加\r\n	firewall-cmd --zone=public --add-port=8080/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）\r\n	重新载入\r\n	firewall-cmd --reload\r\n	查看\r\n	firewall-cmd --zone=public --query-port=8080/tcp\r\n	\r\n\r\n	最后我直接把war包扔了上去,ok\r\n	\r\n	导出数据表(结构+数据)\r\n	mysqldump -uroot -p123456 guang user > F:\\BaiduNetdiskDownload\\mysql_script\\user.sql \r\n	(然后发现上面的数据库已经有这个表+数据了,然后发现配置中的数据库+账户+密码+表全都一一对应,省事了,第一次遇上这么顺心的事)\r\n	\r\n	这台虚拟机上的数据库有以下账户\r\n	root	123456\r\n	admin	Admin@123456(maybe)\r\n	guang	Guang@123456(maybe)\r\n	\r\n	我擦,删了war包,结果整个项目都没了\r\n	重新上传war,ok\r\n	\r\n# 总结:\r\n\r\n	1安装jdk\r\n	2配置环境变量\r\n	3安装Tomcat\r\n	4设置防火墙\r\n	5安装mysql\r\n	6设置防火墙,账户,密码,库,表,数据\r\n	7(配置文件先配置好)打包丢到tomcat中\r\n	that\'s all\r\n\r\n# 实际部署时遇到的问题\r\n    \r\n## question_first:\r\n [参考资料][1]\r\n\r\n    Q: java.lang.NoSuchMethodException: org.apache.catalina.deploy.WebXml addServlet\r\n    \r\n    A: 在tomacat的context.xml里加上<Loader delegate=\"true\" />\r\n   \r\n   \r\n\r\n## question_second:\r\n[参考资料][2]\r\n\r\n    Q: 严重: Exception sending context initialized event to listener instance of class com.demo.web.listener.InitApplicationListenerjava.lang.IllegalArgumentException\r\n    at org.springframework.asm.ClassReader.<init>(Unknown Source)\r\n    at org.springframework.asm.ClassReader.<init>(Unknown Source)\r\n    at org.springframework.asm.ClassReader.<init>(Unknown Source)\r\n    at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:52)\r\n    at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:80)\r\n    \r\n    A: 这是Spring_3.x与jdk1.8不兼容问题造成的,而我因为前几天部署两外一个项目把jdk换了1.8,结果gg.换回来1.7后成功跑起来了\r\n    \r\n\r\n\r\n  [1]: http://blog.csdn.net/u013031360/article/details/52389402\r\n  [2]: http://blog.csdn.net/sgls652709/article/details/49878741', '1', 'post', 'publish', 'linux', 'default', '29', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('7', 'user manage + group manage +rpm+yum', null, '1501144968', '1501146932', '# 关于linux下的用户管理\r\n\r\n\r\n----------\r\n\r\n\r\n## 无非就是user,group\r\n\r\n	passwd,shadow,group,gshadow\r\n	useradd	groupadd\r\n	usermod	groupmod\r\n	userdel	groupdel\r\n	id;chfn;chsh;\r\n	groups;newgrp;gpasswd \r\n\r\n\r\n## acl(access control list :有针对性地设定某些用户以及组的权限)\r\n\r\n	getfacl\r\n	setfacl\r\n\r\n## 切换用户\r\n\r\n	su -		(su -l root的简写)\r\n\r\n\r\n## 短暂获取root(或者指定用户)权限\r\n\r\n	sudo (-u root)\r\n	设置: /etc/sudoers\r\n		此文件不推荐直接编辑,系统提供编辑指定入口:visudo\r\n		使用者帳號  登入者的來源主機名稱=(可切換的身份)  可下達的指令\r\n		username               ALL=(ALL)           ALL   \r\n		%groupname             ALL=(ALL)           ALL	\r\n		免密码;\r\n		%groupname             ALL=(ALL)           NOPASSWD:ALL	\r\n\r\n\r\n## 实际操作一下\r\n\r\n	useradd guang \r\n	passwd guang \r\n	useradd faker\r\n	passwd faker\r\n	useradd solofeng\r\n	passwd solofeng\r\n	groupadd admin\r\n	usermod -G admin solofeng\r\n	usermod -G admin faker\r\n	visudo\r\n	guang             ALL=(ALL)           NOPASSWD:ALL\r\n	%admin             ALL=(ALL)           NOPASSWD:ALL\r\n\r\n<del>PAM嵌入式模块<del>\r\n\r\n# 系统用户的通讯\r\n\r\n	首先查找系统上的用户\r\n	w;who;lastlog\r\n	通讯\r\n	write, mesg, wall\r\n	mail\r\n\r\n\r\n# 建立\'创建用户脚本\'\r\n\r\n	首先检查passwd和shadow文件的情况,如检查是否存在用户没有独立的家目录,检查用户的密码是否有问题等\r\n	pwck;pwconv(其实就是一个把密码从passwd写到shadow的脚本);\r\n\r\n\r\n####准备文件accountadd.txt\r\n\r\n	std01\r\n	std02\r\n	std03\r\n	std04\r\n	std05\r\n	\r\n####下面就是创建用户脚本vim accountadd.sh\r\n\r\n	#!/bin/bash\r\n	# This shell script will create amount of linux login accounts for you.\r\n	# 1. check the \"accountadd.txt\" file exist? you must create that file manually.\r\n	#    one account name one line in the \"accountadd.txt\" file.\r\n	# 2. use openssl to create users password.\r\n	# 3. User must change his password in his first login.\r\n	# 4. more options check the following url:\r\n	# http://linux.vbird.org/linux_basic/0410accountmanager.php#manual_amount\r\n	# 2015/07/22    VBird\r\n	export PATH=/bin:/sbin:/usr/bin:/usr/sbin\r\n	\r\n	# 0. userinput\r\n	usergroup=\"\"                   # if your account need secondary group, add here.\r\n	pwmech=\"openssl\"               # \"openssl\" or \"account\" is needed.\r\n	homeperm=\"no\"                  # if \"yes\" then I will modify home dir permission to 711\r\n	\r\n	# 1. check the accountadd.txt file\r\n	action=\"${1}\"                  # \"create\" is useradd and \"delete\" is userdel.\r\n	if [ ! -f accountadd.txt ]; then\r\n		echo \"There is no accountadd.txt file, stop here.\"\r\n	        exit 1\r\n	fi\r\n	\r\n	[ \"${usergroup}\" != \"\" ] && groupadd -r ${usergroup}\r\n	rm -f outputpw.txt\r\n	usernames=$(cat accountadd.txt)\r\n	\r\n	for username in ${usernames}\r\n	do\r\n	    case ${action} in\r\n	        \"create\")\r\n	            [ \"${usergroup}\" != \"\" ] && usegrp=\" -G ${usergroup} \" || usegrp=\"\"\r\n	            useradd ${usegrp} ${username}               # 新增帳號\r\n	            [ \"${pwmech}\" == \"openssl\" ] && usepw=$(openssl rand -base64 6) || usepw=${username}\r\n	            echo ${usepw} | passwd --stdin ${username}  # 建立密碼\r\n	            chage -d 0 ${username}                      # 強制登入修改密碼\r\n	            [ \"${homeperm}\" == \"yes\" ] && chmod 711 /home/${username}\r\n		    echo \"username=${username}, password=${usepw}\" >> outputpw.txt\r\n	            ;;\r\n	        \"delete\")\r\n	            echo \"deleting ${username}\"\r\n	            userdel -r ${username}\r\n	            ;;\r\n	        *)\r\n	            echo \"Usage: $0 [create|delete]\"\r\n	            ;;\r\n	    esac\r\n	done\r\n\r\n####最后执行脚本sh accountadd.sh create\r\n\r\n\r\n# 便捷式安装软件(rpm&&yum)\r\n\r\n**由于主要使用centos,所以主要关注RPM,而yum在rpm的基础上解决了软件之间的依赖性问题,算是一个补充||增强**<br> \r\n	\r\n	rpm相对于源码安装的优点\r\n	1.已经编译好,设定编译的环境一样,拿来即用\r\n	2.将安装信息放入linux的资料库,对于查询||升级||卸载都很方便\r\n	在这里顺便备注一下:SRPM的S指的是source,也就是说,他没有编译,处于源码安装与rpm之间,他提供软件依赖的信息,也提供参数等,就只缺少了编译,我们需要使用rpm的方式对其编译,它唯一的有点就是可以让我们修改参数,使安装相对灵活.\r\n\r\n> srpm这个东西真多余\r\n\r\n	关于软件的文件名\r\n	rp-pppoe -        3.11   -     5.el7      .x86_64  .rpm\r\n	软件名称       软件的版本    发布的次数 		硬件平台 后缀	\r\n	i386||i586||i686我都不管,以后都是64位的天下.	\r\n	x86_64\r\n	noarch就是沒有任何硬體等級上的限制。\r\n	\r\n	rpm的不足:\r\n	他只能查询软件之间的依赖关系,但没有能力帮你解决依赖问题.举个栗子:你要安装tomcat,但是系统没有安装jdk.rpm能查探到此信息并告诉你,系统上没有jdk,tomcat无法安装;\r\n	对比源码安装,源码安装能安装上,但是因为系统没有jdk,tomcat实际上不能正常运作的;\r\n	而yum则补充了rpm的不足.\r\n\r\n	rpm提供校验以及签名功能.有什么用呢.举个栗子:我使用rpm安装了mysql,某一天我手一抖,把my.ini删掉了而不自觉,呵呵哒,这TM的怎么办,mysql莫名其妙地就跑不起来了\r\n	由于rpm是把信息记录到linux库里头,so,你可以使用rpm verify的功能比对一下库信息与系统的信息,就能发现,哦my.ini不见了\r\n	具体的详细的用法,请自行help||man||google\r\n	数字签名signature其实是信息安全的范畴.他保证我们获取的软件就是正规软件开发商所提供的软件,而不是中途被creaker污染过的软件,因为如果误装了不知名的软件后果是很严重的.不过在这里扯信息安全有点太早了,跳过跳过~\r\n\r\n	rpm卸载软件时,要求先删除子软件,再删除父软件(参考删除父表记录前,必须先删除对应子表记录).还是举个栗子吧:\r\n	如果想删除jdk,请先把mysql卸了,否则rpm提示卸载失败,因为他检测到卸载jdk会导致mysql异常.\r\n	所以你明白前两天删除jdk时,为什么要加上 --nodeps了吧,网路上那位老兄坑我啊.我系统崩了,我就拿菜刀找你去~\r\n\r\n	使用yum\r\n	查询yum [list|info|search|provides|whatprovides]\r\n	安装yum install\r\n	更新yum update\r\n	卸载yum remove\r\n	yum甚至提供了强大的软件群功能,就是yum grouplist||**,TM比window还方便,还不会植入莫名其妙的附带软件,贼TM好用\r\n	更多细节,请自行help||man||google\r\n	\r\n	说到yum,就不得不提yum的镜像源的位置.\r\n	MLGJ,我上次下载musql的rpm包需要老长时间了,差点没气死,\r\n	后来了解了yum的下载机制,马上更换了个阿里云镜像,一看网速,感觉瞬间来到了天堂\r\n\r\n\r\n2017/7/18 17:15:14 ', '1', 'post', 'publish', 'linux', 'default', '7', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('8', '工作排程+程序管理', null, '1501145223', '1501147303', '# 工作排程\r\n\r\n    1. 单次工作排程at(由服务atd提供)\r\n    2. 循环工作排程crontab(由服务crond提供)\r\n\r\n\r\n    *补充,最小单位是分钟*\r\n\r\n    **at的使用**\r\n\r\n    - 首先确保服务运行状态,问万能的systemctl\r\n    - systemctl status||enable||restart atd\r\n    - 通过at指令将工作排程内容写入/var/spool/at/目录内,atd读取此目录下的内容\r\n    - 使用at命令需要/etc/at.allow 或者 /etc/at.deny设置权限\r\n\r\n\r\n	at now + 5 seconds\r\n	ls -al /\r\n	以ctrl+d结束\r\n	at是在后台运行的	\r\n\r\n\r\n    **管理at产生的任务**\r\n\r\n    - atq   at+query\r\n    - atrm  at+remove\r\n\r\n    **batch可以批量调用at,类似script,没什么实际意义**\r\n\r\n    **关于cron**\r\n    \r\n    设定上,跟at很类似\r\n\r\n    /etc/cron.allow以及/etc/cron.deny\r\n\r\n    crontab指令添加的工作丢到/var/spool/cron/{username}/\r\n\r\n\r\n	crontab -e\r\n	0   12  *  *  * mail -s \"at 12:00\" dmtsai < /home/dmtsai/.bashrc\r\n	分  時  日  月 週 |<==============指令串========================>|\r\n\r\n\r\n\r\n	*(星號) == 代表任何時刻都接受的意思！舉例來說，範例一內那個日、月、週都是 * ， 就代表著『不論何月、何日的禮拜幾的 12:00 都執行後續指令』的意思！\r\n	,(逗號) == 代表分隔時段的意思。舉例來說，如果要下達的工作是 3:00 與 6:00 時，就會是：0 3,6 * * * command\r\n	時間參數還是有五欄，不過第二欄是 3,6 ，代表 3 與 6 都適用！\r\n	-(減號) == 代表一段時間範圍內，舉例來說， 8 點到 12 點之間的每小時的 20 分都進行一項工作：20 8-12 * * * command\r\n	仔細看到第二欄變成 8-12 喔！代表 8,9,10,11,12 都適用的意思！\r\n	/n(斜線) == 	那個 n 代表數字，亦即是『每隔 n 單位間隔』的意思，例如每五分鐘進行一次，則：*/5 * * * * command\r\n	\r\n	以上crontab任务都是针对系统上的用户设置的工作排程crontab -u username ,默认为当前用户.\r\n	如果是针对系统的工作排程,那么可以直接编辑/etc/crontab这个文件.\r\n	实际上crond服务会读取/etc/crontab && /etc/cron.d/* && /var/spool/cron/{usernaem}/ 下的设置文件.\r\n\r\n2017/7/19 9:51:08 \r\n\r\n\r\n\r\n# 程序管理\r\n    举个栗子好了,我讨厌概念\r\n    bash本身就是一个程序,用户guang登录时产生一个独立的程序:一个属于guang的shell,这个shell能读取用户guang的权限,有自己的pid.<br>\r\n    在此shell下执行操作,touch test.txt ,touch指令会调用一个子程序(继承父程序shell的权限+参数+etc)生成test.txt文件.<br>\r\n    子程序的生成是通过父程序的fork-and-exec产生的.<br>\r\n    有的程序被调用完就死掉了,有的程序一直活着.死掉的(没有在运行)程序叫程式;一直运行的叫服务.如果服务是具有网络功能,他还会搞一个新功能:端口.(╯‵□′)╯︵┻━┻.谁管这个,我都叫程序.<br>\r\n\r\n    我只想在一个shell里玩耍,但是我经常被一个任务占据了shell的前台,让人十分生气,所以我来学jobs control了\r\n\r\n\r\n    1. ctrl+z暂停并丢到background;\r\n    2. jobs查看background里头的工作;\r\n    3. fg %job`s number把指定的job丢到foreground执行;\r\n    4. bg %job`s number让指定的job在background运行.\r\n    5. kill -15 %job`s number正常关闭job\r\n    6. kill -9 %job`s number强制关闭job\r\n\r\n\r\n    *这里的前景背景都只是针对当前的shell而言的,也就是说你退出了shell,那么jobs就gameover了.想要退出shell还执行请使用at/cron*<br>\r\n    *类似ps的指令还有top;pstree*\r\n\r\n####观察系统的资源的情况\r\n\r\n	查看内存 == free \r\n	查看核心 == uname\r\n	查看系统启动时间以及工作负载 == update\r\n	查看网络 == netstat \r\n	分析核心产生的信息 == dmesg \r\n\r\n\r\n\r\n####常识\r\n\r\n	&/bg == 后台运行\r\n	fg == 前台运行\r\n	ctrl+c == 终止\r\n	ctrl+Z == 暂停挂起\r\n	ctrl+d == EOF\r\n\r\n####常用指令\r\n\r\n	ps aux\r\n	ps axjf\r\n\r\n2017/7/19 11:15:51 \r\n\r\n\r\n#    神秘的selinux(Security Enhanced Linux)\r\n\r\n####DAC:根据程序的拥有者和文件之源的rwx权限來決定有无访问的能力(用户启动程序==>程序获得用户的权限==>程序获得文件时比对此用户对于此文件的权限)<br>\r\n存在不足\r\n\r\n    - root无视权限问题(root被窃取就炸了)(这个就不只是这个程序的问题了,整个系统都要遭重)\r\n    - 文件误设置为777(文件权限设置不当也炸了)\r\n\r\n##    selinux提供了MAC\r\n	mac是怎么样的呢?\r\n	dac的情况是程序读取用户的权限,揸fit的是用户\r\n	mac揸fit的却是程序(那么用户的权限怎么处理,忽略吗?),所有相关文件都必须对此程序做出相关的权限设定.我靠,这TM要累死个人.\r\n	为了简化文件对程序的权限设置,selinux提供了一系列的策略Policy和规则rule,我们选择启用与否即可\r\n	\r\n\r\n----------\r\n	简单地举个栗子:\r\n	root用户以DAC方式启动httpd,httpd可以操作系统上的任意文件,root强无敌\r\n	root用户以MAC方式启动httpd,http只能操作默认/var/www/目录下的问价,想操作其他文件,不好意思,先让其他文件设置对httpd程序的权限再说,否则root也免谈\r\n	\r\n####selinux具体怎么玩?\r\n\r\n    - 主体(subject) == 程序\r\n    - 目标(object) == 资源文件咯\r\n    - 策略(policy) == 有三种targeted||minimum||mls \r\n    - 安全性文本(security context)  主体与目标之间的安全性文本必须一致才可以访问.安全性文本需要自己设置,放置在inode当中.\r\n\r\n####关于策略:\r\n\r\n	1.targeted  針對網路服務限制較多，針對本機限制較少，是預設的政策\r\n	2.minimum  由target修訂而來，僅針對選擇的程序來保護！\r\n	3.mls  完整的SELinux限制，限制方面較為嚴格\r\n\r\n\r\n----------\r\n\r\n	查看安全性文本:\r\n	[guang@www Desktop]$ sudo cd /root\r\n	[guang@www Desktop]$ ls -Z\r\n	-rw-rw-r--. guang guang unconfined_u:object_r:user_home_t:s0 test2.txt\r\n	-rw-rw-r--. guang guang unconfined_u:object_r:user_home_t:s0 test.txt\r\n	\r\n	unconfined_u:object_r:user_home_t\r\n	身份识别   	角色			类型\r\n	\r\n	身份识别\r\n		1.unconfined_u：不受限的用戶，該檔案來自於不受限的程序所產生的\r\n		2.system_u：系統用戶，大部分就是系統自己產生的檔案囉\r\n	角色\r\n		1.object_r:代表的是檔案或目錄等檔案資源\r\n		2.system_r：代表的就是程序\r\n	类型\r\n		1.type：在檔案資源 (Object) 上面稱為類型 (Type)；\r\n		2.domain：在主體程序 (Subject) 則稱為領域 (domain) \r\n		3.domain 需要與 type 搭配，則該程序才能夠順利的讀取檔案資源(策略负责处理domain与type的关系)\r\n	\r\n	修改selinux的策略/etc/selinux/config	\r\n	一些相关的指令:\r\n		setenforce\r\n		getenforce\r\n		sestatus\r\n	更多细节请自行google\r\n\r\n\r\n2017/7/19 13:14:47 \r\n		\r\n\r\n#关于管理系统服务\r\n其实我只看到了一个systemctl,一个命令治天下,流弊\r\n2017/7/19 13:15:57 \r\n\r\n', '1', 'post', 'publish', 'linux', 'default', '7', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('9', '文件与目录与文件系统', null, '1501145374', '1501147422', '# 文件与目录配置\r\n\r\n	我擦咧,这里怎么什么都没有\r\n	就说了权限对于文件/目录的意义\r\n	还有怎么修改文件的属性与权限\r\n	修改拥有者chown,修改所属组chgrp,(常见应用与复制资料给别人时,因为会连权限属性等一起复制,所以会导致他人有资料却没有权限操作.这个时候修改属性,修改权限什么的旧派得上用场了)\r\n	修改权限chmod\r\n\r\n\r\n\r\n# 文件与目录权限\r\n\r\n1. cd\r\n2. pwd\r\n3. mkdir\r\n4. rmdir\r\n5. PATH\r\n6. ls\r\n7. cp\r\n8. mv\r\n9. rm\r\n10. cat\r\n11. tac\r\n12. more\r\n13. less\r\n14. head\r\n15. tail\r\n16. touch\r\n17. umask\r\n18. chattr \r\n19. lsattr\r\n20. SUID||SGID||SBIT\r\n21. file\r\n21. which||whereis||locate||updatedb||find\r\n\r\n\r\n----------\r\n\r\n	umask\r\n	掩码,是用来计算文件/文件夹的预设权限,默认值0022.\r\n	说到umask,就要先说一下linux的常识:\r\n		1.文件的预设权限是666(去掉了x)\r\n		2.目录的预设权限是777\r\n	实际权限 = 预设权限 - umask;\r\n	所以通常情况下,我们的new一个文件,看到他的实际权限是644(rw-r--r--).\r\n	操作方式:umask 002\r\n\r\n----------\r\n	chattr||lsattr\r\n	操作文件的隐藏属性\r\n	直说一下 a && i\r\n	a是只能添加内容,不允许其他操作;\r\n	i是不允许任意操作.\r\n	操作方式chattr +i\r\n\r\n----------\r\n	SUID(4)\r\n	只针对可执行文件\r\n	使执行者获得文件拥有者的权限\r\n	SGID(2)\r\n	使执行者获得文件所属群组的权限\r\n	SBIT(1)\r\n	只针对目录,目录下文件只有文件拥有者以及root可以删除\r\n	操作方式:chmod 7777\r\n		后面三位数是正常地rwx,第一位=7,则有SUID+SGID+SBIT的意思,虽然这是不可能的.这时会产生空权限,空权限的位置使用大写表示.\r\n\r\n----------\r\n	which\r\n	使用which查找指令的位置\r\n	whereis||locate||find\r\n	这三个则是查找文件的.\r\n\r\n----------\r\n\r\n\r\n\r\n\r\n\r\n# 磁盘与文件系统的管理\r\n**这一章比较重点,我也比较陌生**\r\n\r\n1. 文件系统概述\r\n2. 操作文件系统\r\n3. 磁盘分区,格式化,校验,挂载\r\n4. 设置开机挂载\r\n5. 设置虚拟内存\r\n6. 查看文件系统的小tips\r\n\r\n\r\n----------\r\n\r\n## 文件系统概述\r\n	文件系统的基本组成\r\n	superblock:記錄此filesystem的整體資訊，包括inode/block的總量,使用量,剩餘量,以及檔案系統的格式與相關資訊等;\r\n	inode:記錄檔案的屬性,一個檔案佔用一個inode,同時記錄此檔案的資料所在的block號碼;\r\n	data block:實際記錄檔案的內容,若檔案太大時,會佔用多個block.\r\n	\r\n\r\n----------\r\n	\r\n	data block没什么好说的,就是具体放置内容的地方,现在一般设置其大小为4K;\r\n\r\n----------\r\n\r\n	inode大小一般为128bytes或者256bytes\r\n	一个文件对应一个inode(所以,文件的上限数量 == inode的数量.)\r\n	inode记录着文件的属性,以及data block的位置.属性好说,就那么几个,data block的位置就不好说了,\r\n	万一那是一个数十个G的超级文件,这data block的数量不得要逆天,没记一个data block都要消耗4byte.inode只有128/256byte字节怎么记得过来.\r\n	于是inode产生了一个机制:12个直接,1个间接,一个双间接,一个三间接(未来还不够用的话就来一个四间接,五间接,根本不抖)\r\n	\r\n\r\n\r\n----------\r\n\r\n**举个手:文件系统与目录是怎么纠缠在一起的?**	\r\n	\r\n	资料文件最终是要放到文件系统里面去的,但是我们肉眼看不了文件系统,只看得到目录.\r\n	所以,我们搞了一个东西,挂载(mount)\r\n	把文件系统挂载到目录上,我们在目录上操作,而目录帮我们把操作映射到文件系统.\r\n	举个栗子:\r\n		/dev/mapper/centos-root on / type xfs (rw,relatime,seclabel,attr2,inode64,noquota)\r\n		/dev/mapper/centos-home on /home type xfs (rw,relatime,seclabel,attr2,inode64,noquota)\r\n	如上所示,我在安装linux的时候曾经划分过centos-root&¢os-home,分别挂在/以及/home上.也就是说,我在/home目录下操作时,我的操作回映射到centos-home这个文件系统下;我在/下的(非/home)的操作会映射到centos-root这个文件系统下.\r\n	我记得没错的话,这是两个文件系统,虽然类型一样,都是xfs,同时也是两个独立的分区.\r\n\r\n\r\n----------\r\n\r\n	扫个盲:\r\n	文件是有内容的滴,放在data block;\r\n	但是目录是没有内容滴,那么难道他不占用data block?\r\n	不不不,他也要占用data block,用于记载他底下的子文件||子目录的名称以及对应的inode的number.\r\n	所以我们进入系统看到目录的过程其实是:看到根目录(根据inode找到根目录的data block,data block记载着根目录下的资料的名字和inode number),就可以一层层往下搜索问价的内容以及子目录.\r\n\r\n	又因为子文件||子目录的名称以及inode是被父目录掌控者的,所以如果我们想要修改子文件||子目录,我们必须去修改父目录的data block.那么就要有父目录的修改权限,也就是w.\r\n	哦.搜嘎搜嘎~\r\n	\r\n## 操作文件系统\r\n	\r\n	df:查询文件系统的使用情况\r\n	du:查询目录下的文件||目录以及他们的容量(大小).比如说我曾经这样纸搜索出最消耗磁盘空间的文件并删除(其实就是oracle的安装包,我去,俩个安装包加起来3G+,我可怜的虚拟机才20G,我可怜的/所挂载的文件系统才10G)\r\n\r\n	链接文件(感觉这个东西没有什么用处啊)\r\n\r\n## 磁盘分区,格式化,校验,挂载	\r\n	硬盘管理:\r\n	1.分区\r\n	2.格式化文件系统\r\n	3.将建好的文件系统挂载到目录上\r\n\r\n----------\r\n\r\n	查看存储设备lsblk \r\n	[guang@www ~]$ lsblk -f\r\n	NAME            FSTYPE      LABEL           UUID                                   MOUNTPOINT\r\n	sda                                                                                \r\n	├─sda1                                                                             \r\n	├─sda2          xfs                         de08151c-b936-47d7-a5b2-b987ee39dd31   /boot\r\n	└─sda3          LVM2_member                 eVKWgr-PdTD-Uyz0-tesD-XAVZ-y950-8b9r6C \r\n	  ├─centos-root xfs                         7fb0a837-7b17-48c4-b68b-8c5db36d6dde   /\r\n	  ├─centos-swap swap                        c38fcd3a-3c1d-4dc5-a5ca-92998b85927f   [SWAP]\r\n	  └─centos-home xfs                         76d7d145-57ce-4ac5-ac48-e91c7abd116e   /home\r\n	sr0             iso9660     CentOS 7 x86_64 2015-12-09-23-14-10-00                 \r\n	[guang@www ~]$ \r\n	linux如此之美,让我感动死了\r\n\r\n\r\n\r\n----------\r\n\r\n	parted查看分区表的信息\r\n	[guang@www ~]$ sudo parted /dev/sda print\r\n	Model: VMware, VMware Virtual S (scsi)\r\n	Disk /dev/sda: 42.9GB\r\n	Sector size (logical/physical): 512B/512B\r\n	Partition Table: msdos{mbr分割表咯,现有PC架构通常使用BIOS+MBR这种组合模式，MSDOS是该模式中的磁盘分区表类型}\r\n	Disk Flags: \r\n	\r\n	Number  Start   End     Size    Type     File system  Flags\r\n	 1      1049kB  3146kB  2097kB  primary\r\n	 2      3146kB  1077MB  1074MB  primary  xfs          boot\r\n	 3      1077MB  33.3GB  32.2GB  primary               lvm\r\n	\r\n\r\n\r\n----------\r\n\r\n	使用fdisk进行磁盘的分割操作(有点慌,赶紧去拍个快照,防止滑稽)	\r\n	擦咧,在linux上操作分区是怎么轻松愉快的一件事啊,window坑爹啊.\r\n\r\n\r\n----------\r\n\r\n	创建分区后\r\n	对磁盘进行格式化:mkfs(建立文件系统)\r\n	mkfs.xfs /dev/sda4(下面乱七八糟的设置,全部使用默认)\r\n\r\n\r\n----------\r\n	\r\n	宕机了怎么办?内存的资料还没来得及同步到硬盘,我去,怎么搞?\r\n	使用xfs_repair命令去检查修复xfs文件系统的情况(检查时,文件系统不能被挂载).\r\n	其他系统找其他工具咯\r\n	还有问题,我想检查/怎么办,根目录无法被卸载啊.去单人维护模式咯,\r\n	\r\n\r\n----------\r\n	\r\n	ok\r\n	创建了新的磁盘分区,又对新磁盘分区进行了格式化,那么把它挂载到目录上吧,\r\n	我已经迫不及待了,我的/快用完了,我想在/data/这里挂载一下新的磁盘分区,以后资料就放这里了,减轻/的负担啊\r\n	对于mount,这里只讲怎么挂上去,\r\n	mount -t xfs uuid=\"...\" /data \r\n	更多详情请help||man||google\r\n	顺便测试挂载我的光盘/U盘\r\n	sudo mount /dev/sr0 /data/cdrom\r\n	sudo umount /data/cdrom\r\n	贼好玩\r\n	\r\n\r\n----------\r\n\r\n	恩,还没完\r\n	有个问题.我关了个机,下次再开机时发现,我新建的分区没有挂载,我去,不是系统自动帮我们挂载的么,太不智能了,还是window好啊\r\n	好吧,系统太懒不自觉,但是我也很懒,我也不想每次都手动挂载,于是去设置一下咯\r\n	设置 /etc/fstab\r\n	里面的东西一看变动,我就不浪费口舌了\r\n\r\n\r\n----------\r\n<del>好,这一章就到这里吧,累死个人,虽然知道这一章比较难,没想到这么难<del>\r\n\r\n2017/7/20 16:54:09 ', '1', 'post', 'publish', 'linux', 'default', '15', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('10', 'shell + shell script', null, '1501145463', '1501147500', '# shell\r\n\r\n\r\n\r\n	- 直接使用等号赋值变量\r\n	- echo ${variable}\r\n	- \'\'使美元符号$失意,\"\"保留美元符号$的作用;\r\n	- 将变量转为环境变量export \r\n	- 删除变量unset \r\n	- env(envirment)查看所有环境变量\r\n	- set查看所有变量\r\n	\r\n\r\n\r\n----------\r\n	\r\n	locale与/etc/locale.conf\r\n	环境变量$表示当前shell的pid\r\n	环境变量?表示上一个指令的返回值\r\n	read 读入键盘输入\r\n	使用declare/typeset 声明变量\r\n	使用varibale[]来定义数组\r\n	ulimit限制shell使用的资源\r\n	\r\n\r\n----------\r\n\r\n	操作变量内容(好像咩有什么用啊)\r\n	1.#从左边删除第一个\r\n	2.##从左边删除到最后一个\r\n	3.%从右边删除第一个\r\n	4.%%从右边删除到最后一个\r\n	5./old/new替换一个\r\n	6.//old/new替换所有\r\n\r\n----------\r\n\r\n	alias, unalias设置别名\r\n	history\r\n	bash进站信息显示/etc/issue, /etc/motd\r\n	使用source 命令读取配置文件.\r\n\r\n	< << > >> 2> 2>>\r\n 	| \r\n	cut\r\n	grep\r\n	sort\r\n	unique\r\n	wc\r\n	tee\r\n	字元轉換命令： tr, col, join, paste, expand\r\n	多而杂,用到了再去google吧,少爷真心记不住~\r\n\r\n2017/7/21 9:49:06 \r\n\r\n# shell script\r\n**其实就是使用判断/循环/参数等把多个指令封装到一起而已,不想看**\r\n\r\n\r\n# 总结\r\n关于基础,已经学得七七八八了,可以去看别的内容了,遇到不懂的,再回来复习.god bless you.\r\n\r\n2017/7/21 9:51:33 ', '1', 'post', 'publish', 'linux', 'default', '5', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('11', 'markdown的语法', null, '1501145579', '1501147549', '# 重构我的文件格式,采用markdown编写\r\n\r\n	+以后的全部采用markdown格式\r\n	+对于以前的文件,如果遇到了,改;心血来潮了,改;否则就不去浪费时间精力了\r\n\r\n# 而关于markdown的规则,我会在这里大致罗列出我会用到的功能,其余的请自行google\r\n\r\n	+\"#\"就是标题的标记,\"#\"的数量代表着标题的级别\r\n	+\"*\"或者\"_\"是斜体\r\n	+\"**\"或者\"__\"是粗体\r\n	+\"+\"是无序列表\r\n	+\"1.  2.  3.\"是有些列表\r\n	+\"![Logo](/image/logo.png)\"是插入图片\r\n	+\"[BaiDu](http://www.baidu.com)\"是超链接,但是推荐使用html的超链接\r\n	+\">\"表示引用\r\n	+\"[x]\"表示已完成任务\r\n	+\"[ ]\"表示未完成任务\r\n	+\"~~\"表示删除线\r\n\r\n	\r\n#快捷键\r\n\r\n	+加粗  Ctrl + B\r\n	+斜体  Ctrl + I\r\n	+引用  Ctrl + Q\r\n	+插入链接  Ctrl + L\r\n	+插入代码  Ctrl + K\r\n	+插入图片  Ctrl + G\r\n	+提升标题  Ctrl + H\r\n	+有序列表  Ctrl + O\r\n	+无序列表  Ctrl + U\r\n	+横线  Ctrl + R\r\n	+撤销  Ctrl + Z\r\n	+重做  Ctrl + Y	\r\n	+tab  自动生成框框 \r\n\r\n\r\n# 代码块与代码框(猴子必备)\r\n\r\n	**代码块语法遵循标准markdown代码，例如：** \r\n	**（在需要高亮的代码块的前一行及后一行使用三个反引号`，同时第一行反引号后面表面代码块所使用的语言）**	\r\n\r\n\r\n# 最后,有什么不会的,markdown编辑器的快捷按钮都有提示,恩~\r\n', '1', 'post', 'publish', 'ide', 'default', '16', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('12', '云计算概论', null, '1501210061', '1501212154', '# 云计算\r\n## 什么是云\r\n<del>共享的软硬件资源和信息可以按需求提供给计算机各种终端和其他设备<del><br>\r\n**云计算的目标是让IT资源如水电一般使用，开关自如，按量计费**<br>\r\n\r\n## 云的服务模式:\r\n\r\n1. Iaas(infrastructure)\r\n2. Saas(software)\r\n3. Paas(platform)\r\n	\r\n	iaas的现状:比较成熟,服务提供者集成大量的资源即可,实现简单\r\n	Paas的现状:不够理想\r\n\r\n\r\n## 云的部署模型:\r\n1. Public Cloud(公有云,真正的大杂烩,如阿里云等)\r\n2. Private Cloud(私有云是企业传统数据中心的延伸和优化,其实就是自己搭建云平台给自己用,适用于包含多用户的单一组织,如:HDXY集团)\r\n3. Hybrid Cloud(混合云,其实就是把边边角角丢到公有云,享受便宜+方便的优势;把重要的,核心的应用,数据丢到私有云,自己掌控数据的安全等问题)\r\n4. Community Cloud\r\n\r\n\r\n## 云的优缺点:\r\n1. 服务提供者(可以简单理解为水电等基础设施提供者)集成大量的资源,用户按需获取即可\r\n2. 数据对服务提供商透明,失去了私密性\r\n\r\n\r\n## 其他相关点\r\n1. 云的核心技术是虚拟化\r\n2. 类似于云的概念可以参考以前的网格计算\r\n\r\n\r\n## 云的意义\r\n1. 计算机物理性能不再是瓶颈(这里只针对服务器而言),\r\n\r\n\r\n## 我的看法\r\n1. 好像没多了不起啊,只是把物理设备抽离出来交给容器统一管理了(参考IOC)', '1', 'post', 'publish', '虚拟化,云计算', 'default', '9', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('13', 'docker', null, '1501489189', '1501650506', '# Docker\r\n\r\n## 不是常识的小常识:\r\n	1. 操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持;\r\n	2. Docker 镜像（Image），就相当于是一个 root 文件系统\r\n	3. 镜像不包含任何动态数据，其内容在构建之后也不会被改变\r\n\r\n\r\n	镜像:一个分层存储结构的文件系统\r\n	容器:镜像的运行态(类比类与实例),在镜像的上方添加一个存储层,\r\n	仓库:集中管理镜像的地方,而所有仓库通过Docker Registry服务进行管理,(仓库=用户/软件名:标签)\r\n\r\n\r\n## 常见的命令与参数\r\n\r\n	docker images\r\n	docker pull	\r\n	docker rmi	//删除镜像\r\n	docker rm	//删除容器\r\n        docker stop\r\n	dcoker rm \r\n	docker ps -a\r\n	\r\n	-i	interactive\r\n	-t	terminal\r\n	-f	filter\r\n        -d     daemon\r\n	\r\n	--filter	filter\r\n\r\n\r\n## 小练习\r\n	使用commit修改镜像+运行多个容器+使用nginx端口映射	\r\n\r\n	docker run --name webserver -d -p 80:80 nginx\r\n	打开http://192.168.126.135链接到了nginx的欢迎页面,nice\r\n	由于未使用卷,所以修改的内容会保存到存储层中;\r\n	可以使用commit 命令来创建新的镜像(把存储层[停止容器,则数据消失]作为新的层添加到原来的镜像上.)\r\n	docker commit --author \"guang<guang@gmail.com>\" --message \"修改了默认网页\" webserver nginx:2.0\r\n	docker run --name webserver2 -d -p 81:80 nginx:2.0\r\n	然后访问http://192.168.126.135:81/,嘿嘿嘿,nice\r\n\r\n## 使用Dockerfile 脚本定制镜像\r\n	FROM nginx	//基础镜像(scratch为空白镜像)\r\n	RUN echo \'<h1>Hello, Docker!</h1>\' > /usr/share/nginx/html/index.html	//添加的层\r\n\r\n	使用run执行命令:\r\n	RUN <命令>\r\n	RUN [\"可执行文件\", \"参数1\", \"参数2\"]\r\n	具体用法可参考git-book\"docker-从入门到实践\"\r\n\r\n	脚本编写玩后进行镜像的构建:\r\n	在 Dockerfile 文件所在目录执行docker build -t nginx:3.0 .(这个点不是指当前路径,指docker的上下文路径)(在这里刚好上下文就是当前路径)\r\n\r\n	然后,Dockerfile 还有10数个指令帮助构建镜像,详情请~\r\n    \r\n## Dockerfile 操作记录:\r\n	docker pull [选项] [Docker Registry]<仓库名>:<标签>\r\n	{\r\n		Docker Registry:ip+port\r\n		仓库名:username+softwarename\r\n		标签:version\r\n	}\r\n	\r\n	下载ubuntu\r\n	docker pull ubuntu:14.04\r\n	\r\n	运行ubuntu,并且指定使用终端交互的方式,指定容器停止即删除\r\n	docker run -it --rm ubuntu:14.04 bash\r\n	\r\n	运行简单世界通用语:helloworld\r\n	docker run hello-world\r\n	\r\n	运行nginx,指定容器名称,指定后台运行,指定映射端口到主机.\r\n	docker run --name webserver -d -p 80:80 nginx\r\n	\r\n	修改index.html --> 存储层发生改变 --> 使用docker commit保存为新镜像(新镜像 = 原镜像 + 存储层)\r\n	\r\n	使用正规方式dockerfile脚本定制镜像\r\n	1. dockerfile中每一条指令都会生成一层,谨慎使用指令,可考虑 && 指令把创建同一层的指令连接在一起.\r\n		FROM nginx		//基础镜像(空镜像scratch),关键字FROM\r\n		RUN echo \'<h1>Hello, Docker!</h1>\' > /usr/share/nginx/html/index.html 	//执行执行关键字RUN \r\n	2. 脚本已经写好,准备构建镜像\r\n		在 Dockerfile 文件所在目录执行\r\n		格式:docker build [选项] <上下文路径/URL/->\r\n		docker build -t nginx:v3 .		//.指代\"上下文目录\",正巧这里是Dockerfile 文件所在目录执行\r\n		解释一下上下文目录,docker build指令把上下文目录的内容传递到docker引擎,由docker引擎进行构建工作,我们这里需要的是dockerfile文件,所以把当前路径作为上下文目录\r\n\r\n\r\n# Docker Compose\r\n\r\n## 作用:\r\n	某些容器之间存在相互依赖的关系,for example:一个web应用可能需要一个db容器,一个cdn容器,一个nginx容器etc.\r\n	Compose恰好满足了这样的需求,允许用户通过一个单独的 dockercompose.yml(模板文件)将这些相关联的容器定义为一个项目.\r\n\r\n## 连个重要概念\r\n	service:一个容器实例/一组容器(同镜像)实例\r\n	project:相关联的容器群\r\n\r\n\r\n# 与容器相关的云计算主要分为两种类型\r\n	一种是传统的 IaaS 服务商提供对容器相关的服务，包括镜像下载、容器托管等。\r\n	另一种是直接基于容器技术对外提供容器云服务，所谓 Container as a Service（CaaS）。\r\n\r\n', '1', 'post', 'publish', '云计算,docker', 'default', '16', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('14', '学习路线', null, '1501637635', '1502155730', '# schedule\r\n\r\n## 整理与归纳\r\n    把所有的内容都整理到blog上来\r\n\r\n## 优化blog\r\n    包括优化分类搜索 + 优化全文检索.\r\n    ', '1', 'post', 'publish', '学习路线', 'log', '8', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('15', 'CentOS下安装软件', null, '1501728188', '1501728564', '# 安装jdk\r\n[安装jdk][1]\r\n\r\n\r\n# 安装tomcat\r\n\r\n[安装tomcat][2]\r\n\r\n# 安装maven\r\n\r\n[安装maven][3]\r\n  \r\n# 阿里云更换yum源\r\n\r\n[阿里云更换yum源][4]\r\n\r\n# 安装docker\r\n\r\n[安装docker][5]\r\n\r\n# 安装docker-compose\r\n\r\n[安装docker-compose][6]\r\n\r\n\r\n  [1]: http://www.linuxidc.com/Linux/2016-09/135556.htm\r\n  [2]: http://www.linuxidc.com/Linux/2015-08/122241.htm\r\n  [3]: http://blog.csdn.net/xtqve/article/details/51670116\r\n  [4]: http://blog.csdn.net/wangmuming/article/details/46914949\r\n  [5]: http://www.linuxidc.com/Linux/2014-12/110034.htm\r\n  [6]: http://www.ttlsa.com/shell/docker-compose-onekey-install/', '1', 'post', 'publish', 'linux', 'log', '21', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('16', '学习方法论', null, '1502170192', '1502170192', '# 学习方法论\r\n\r\n1. 目标(写个决心书)\r\n2. 方法\r\n3. 勤奋\r\n4. 坚持\r\n5. 良师益友', '1', 'post', 'publish', '学习方法', '默认分类', '5', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('17', '信息安全', null, '1502170280', '1502175729', '# 信息安全\r\n\r\n1. 加密\r\n2. 认证\r\n3. 签名\r\n4. 完整性控制\r\n\r\n\r\n## 信息安全涉及的知识\r\n\r\n1. 密码系统\r\n2. 对称密匙算法\r\n3. 共匙算法\r\n4. 数字签名\r\n5. 公钥管理\r\n6. 通信安全\r\n7. 认证协议\r\n8. 栗子:email安全 && web安全\r\n\r\n## 测试图片\r\n\r\n![test photo][1]\r\n![111][2]\r\n![2223][3]\r\n\r\n\r\n  [1]: /user/img/logo.png\r\n  [2]: http://img2.tbcdn.cn/L1/461/1/d7e9a881c8940c216e6c1d8cb3bbbe7407e1e63b.png\r\n  [3]: https://github.com/imshadowurlight/photo/blob/master/images/report201707.jpg?raw=true', '1', 'post', 'publish', '', '默认分类', '26', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('18', 'spring boot', null, '1502429323', '1502440675', '# spring boot\r\n\r\n## spring-boot找不到指定路由\r\n    报错:\r\n    Whitelabel Error Page\r\n    This application has no explicit mapping for /error, so you are seeing this as a fallback.\r\n    Wed Dec 14 16:35:25 CST 2016\r\n    There was an unexpected error (type=Not Found, status=404).\r\n    No message available\r\n\r\n    原因是【Application启动类放的位置不对】要将Application放在最外层，也就是要包含所有子包。\r\n    比如你的groupId是com.google,子包就是所谓的com.google.xxx,所以要将Application放在com.google包下。\r\n    请参考以下结论：spring-boot会自动加载启动类所在包下及其子包下的所有组件.\r\n\r\n## spring boot 在idea配置热部署无效\r\n    \r\n    <!--添加依赖-->\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-devtools</artifactId>\r\n        <!-- optional=true,依赖不会传递，该项目依赖devtools；之后依赖myboot项目的项目如果想要使用devtools，需要重新引入 -->\r\n        <optional>true</optional>\r\n    </dependency>\r\n\r\n    对idea环境进行设置\r\n    “File” -> “Settings” -> “Build,Execution,Deplyment” -> “Compiler”，选中打勾 “Build project automatically” 。\r\n    组合键：“Shift+Ctrl+Alt+/” ，选择 “Registry” ，选中打勾 “compiler.automake.allow.when.app.running” 。\r\n\r\n## 寻找返回视图出错\r\n    Hint: This may be the result of an unspecified view, due to default view name generation\r\n    摘录网上回答，When you don’t declare a ViewResolver, spring registers a default InternalResourceViewResolver which creates instances of JstlView for rendering the View. \r\n    当你没有声明ViewResolver时，spring会给你注册一个默认的ViewResolver，其是JstlView的实例。\r\n    它通过RequestDispatcher寻找资源（视图），不过这个资源也可能是Servlet，也就是说，Controller中方法返回字符串（视图名），也可能会解析成Servlet。            \r\n    当你的请求路径与视图名相同时，就会发生死循环。\r\n\r\n## 与官方推荐的Thymeleaf渲染模板整合\r\n[Thymeleaf][1]\r\n\r\n\r\n## 整合druid数据源\r\n\r\n### 向pom.xml引入依赖\r\n\r\n    懒,直接拿这个项目的内容当栗子了\r\n    		<!--引入mysql的依赖-->\r\n		<dependency>\r\n			<groupId>mysql</groupId>\r\n			<artifactId>mysql-connector-java</artifactId>\r\n		</dependency>\r\n\r\n		<!--spring管理数据源的依赖-->\r\n		<dependency>\r\n			<groupId>org.springframework</groupId>\r\n			<artifactId>spring-jdbc</artifactId>\r\n		</dependency>\r\n\r\n		<!--引入数据源druid-->\r\n		<dependency>\r\n			<groupId>com.alibaba</groupId>\r\n			<artifactId>druid</artifactId>\r\n			<version>RELEASE</version>\r\n		</dependency>\r\n\r\n### 配置数据源\r\n    xml配置(略)\r\n\r\n    java配置\r\n    1. 使用注解@WebFilter,@WebServlet,@WebListener,@ServletComponentScan注解配置(略)\r\n    2. 基于Bean的配置\r\n    \r\n```java\r\npackage com.example.demo.config;\r\n\r\nimport com.alibaba.druid.pool.DruidDataSource;\r\nimport com.alibaba.druid.support.http.StatViewServlet;\r\nimport com.alibaba.druid.support.http.WebStatFilter;\r\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\r\nimport org.springframework.boot.web.servlet.ServletRegistrationBean;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.annotation.Primary;\r\n\r\nimport java.sql.SQLException;\r\n\r\n/**\r\n * @author guang\r\n * @date 2017-08-11\r\n * @description 配置数据源,blog项目中沿用xml配置,spring boot官方推荐使用class配置\r\n * */\r\n\r\n@Configuration\r\npublic class DataSourcesConfig {\r\n\r\n    /*\r\n    * 数据源使用druid\r\n    * */\r\n    @Primary //默认数据源\r\n    @Bean(name = \"dataSource\",destroyMethod = \"close\")\r\n    public DruidDataSource Construction() throws SQLException {\r\n        DruidDataSource dataSource = new DruidDataSource();\r\n        dataSource.setUrl(\"jdbc:mysql://192.168.126.136:3306/guang\");\r\n        dataSource.setUsername(\"guang\");\r\n        dataSource.setPassword(\"Guang@12345\");\r\n        dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\r\n\r\n\r\n        //配置最大连接\r\n        dataSource.setMaxActive(20);\r\n        //配置初始连接\r\n        dataSource.setInitialSize(1);\r\n        //配置最小连接\r\n        dataSource.setMinIdle(1);\r\n        //连接等待超时时间\r\n        dataSource.setMaxWait(60000);\r\n        //间隔多久进行检测,关闭空闲连接\r\n        dataSource.setTimeBetweenEvictionRunsMillis(60000);\r\n        //一个连接最小生存时间\r\n        dataSource.setMinEvictableIdleTimeMillis(300000);\r\n        //用来检测是否有效的sql\r\n        dataSource.setValidationQuery(\"select \'x\'\");\r\n        dataSource.setTestWhileIdle(true);\r\n        dataSource.setTestOnBorrow(false);\r\n        dataSource.setTestOnReturn(false);\r\n        //打开PSCache,并指定每个连接的PSCache大小\r\n        dataSource.setPoolPreparedStatements(true);\r\n        dataSource.setMaxOpenPreparedStatements(20);\r\n        //配置sql监控的filter\r\n        dataSource.setFilters(\"stat,wall,log4j\");\r\n        try {\r\n            dataSource.init();\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\"druid datasource init fail\");\r\n        }\r\n        return dataSource;\r\n    }\r\n\r\n\r\n    /**\r\n     * druid监控\r\n     * @return\r\n     */\r\n    @Bean\r\n    public ServletRegistrationBean druidServlet() {\r\n        ServletRegistrationBean reg = new ServletRegistrationBean();\r\n        reg.setServlet(new StatViewServlet());\r\n        reg.addUrlMappings(\"/druid/*\");\r\n        //reg.addInitParameter(\"allow\", \"127.0.0.1\");\r\n        //reg.addInitParameter(\"deny\",\"\");\r\n        reg.addInitParameter(\"loginUsername\", \"guang\");\r\n        reg.addInitParameter(\"loginPassword\", \"Guang@12345\");\r\n        return reg;\r\n    }\r\n\r\n    /**\r\n     * druid监控过滤\r\n     * @return\r\n     */\r\n    @Bean\r\n    public FilterRegistrationBean filterRegistrationBean() {\r\n        FilterRegistrationBean filterRegistrationBean = new FilterRegistrationBean();\r\n        filterRegistrationBean.setFilter(new WebStatFilter());\r\n        filterRegistrationBean.addUrlPatterns(\"/*\");\r\n        filterRegistrationBean.addInitParameter(\"exclusions\", \"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*\");\r\n        return filterRegistrationBean;\r\n    }\r\n\r\n}\r\n\r\n\r\n```\r\n\r\n\r\n### 查看整合http://localhost:8089/druid/datasource.html\r\n \r\n![栗子][2]\r\n![栗子][3]\r\n    \r\n\r\n\r\n  [1]: http://localhost:8080/article/20/preview\r\n  [2]: https://github.com/imshadowurlight/photo/blob/master/images/druid001.png?raw=true\r\n  [3]: https://github.com/imshadowurlight/photo/blob/master/images/druid002.png?raw=true', '1', 'post', 'publish', 'java', 'default', '44', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('19', 'idea', null, '1502431138', '1502431138', '# 快捷键\r\n\r\n## 调试\r\n    shift+F9:debug\r\n    F7:下一行||进入方法\r\n    F8:下一行\r\n    F9:下一个断点       \r\n\r\n## ', '1', 'post', 'publish', 'java', 'default', '2', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('20', 'Thymeleaf', null, '1502435323', '1502435387', '# 视图模板Thymeleaf\r\n\r\n## 引入依赖\r\n    <dependency>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-thymeleaf</artifactId>\r\n    </dependency>\r\n\r\n## 配置视图解析器\r\n    提供默认值\r\n    在application.properties中可以配置thymeleaf模板解析器属性\r\n    具体可以配置的参数可以查看\r\n    org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties这个类,上面的配置实际上就是注入到该类中的属性值\r\n\r\n## html引入模板引擎\r\n\r\n    <!DOCTYPE html>\r\n\r\n<!--修改html命名空间,添加模板引擎-->\r\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\">\r\n<head>\r\n    <meta charset=\"UTF-8\"></meta>\r\n    <title>index</title>\r\n\r\n    <!--Thymeleaf对于URL的处理是通过语法@{…}来处理的-->\r\n    <!--\r\n    #绝对路径\r\n    @{http://blog.csdn.net/u012706811}\r\n    相对路径\r\n    @{/}\r\n    #Content路径,默认访问static下的css文件夹\r\n    @{css/bootstrap.min.css}\r\n    -->\r\n    <link th:href=\"@{/css/common.css}\" rel=\"stylesheet\"/>\r\n</head>\r\n<body>\r\n\r\n    <!--$表达式只能写在th标签内部,不然不会生效,下面例子就是使用th:text标签的值替换p标签里面的值,至于p里面的原有的值只是为了给前端开发时做展示用的.这样的话很好的做到了前后端分离.-->\r\n    <!--由于name这个参数虽然在后台被注入值了,但是html无法检测是否有被注入值,所以红线报错,alt+enter添加注解直接告诉他已被注入值就可以了-->\r\n    <!--/*@thymesVar id=\"name\" type=\"java.lang.String\"*/-->\r\n    <p th:text=\"${name}\" class=\"red\">Mary</p>\r\n\r\n    <!--拼接字符串-->\r\n    <!--类似的功能区官方文档:http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html查阅,不一一细说了-->\r\n    <p th:text=\"\'你好,我是\'+${name}\" class=\"red\">Mary</p>\r\n    <p th:text=\"|你好,我是${name}|\" class=\"red\">Mary</p>\r\n\r\n    <p th:text=\"2017 + 2\" class=\"red\">2018</p>\r\n    <div th:with=\"isEven=(88 % 2 == 0)\">\r\n        <p>我是偶数</p>\r\n    </div>\r\n    <br />\r\n    <a href=\"http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html\">类似的功能区官方文档:http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html查阅,不一一细说了</a>\r\n\r\n    <!--Thymeleaf还提供了一系列Utility对象（内置于Context中），可以通过#直接访问-->\r\n    <!--类似的工具类还有一堆,请移步官网-->\r\n    <!--/*@thymesVar id=\"date\" type=\"java.util\"*/-->\r\n    <p th:text=\"${#dates.format(date, \'dd/MM/yyyy HH:mm\')}\"></p>\r\n    <p th:text=\"${#dates.format(date, \'yyyy-MM-dd HH:mm:ss\')}\"></p>\r\n    <p th:text=\"${#dates.createNow()}\"></p>\r\n    <p th:text=\"${#dates.format(#dates.createNow(), \'yyyy-MM-dd HH:mm:ss\')}\"></p>\r\n    <p th:text=\"${#dates.format(#dates.createToday(), \'yyyy-MM-dd HH:mm:ss\')}\"></p>\r\n\r\n\r\n</body>\r\n</html>', '1', 'post', 'publish', 'java', 'default', '10', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('21', '目录', null, '1502678886', '1502697286', '# 目录\r\n## git\r\n[git][1]\r\n\r\n\r\n## java\r\n\r\n## \r\n   \r\n\r\n\r\n  [1]: http://localhost:8080/article/22/preview', '1', 'post', 'publish', 'none', 'default', '5', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('22', 'git', null, '1502679405', '1502696509', '# git\r\n## reason\r\n    老是把一些常用的命令,以及用法忘记了,然后满世界去查资料,既浪费时间又浪费精力\r\n    没办法,老年人,记性差,只好老老实实做好笔记,忘记了,就会这里看看\r\n    推荐刚开始不熟悉的时候,使用commond,别用什么图形界面,也别使用idea等集成环境的插件,commond本身带有许多提示,对学习git本身比较友好.\r\n\r\n## 安装\r\n    略\r\n\r\n## 配置\r\n    因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识\r\n    [2017/8/14 10:55:12] ? guang@www  ~  git config --global user.name \"guang\" \r\n    [2017/8/14 10:55:32] ? guang@www  ~  git config --global user.email  \"knock-knock@outlook.com\"\r\n    [2017/8/14 10:55:39] ? guang@www  ~  git config --global  --list                              \r\n    [2017/8/14 10:55:39] user.name=guang\r\n    [2017/8/14 10:55:39] user.email=knock-knock@outlook.com\r\n\r\n    config 配置有system级别 global（用户级别） 和local（当前仓库）三个 设置先从system-》global-》local  底层配置会覆盖顶层配置 分别使用--system/global/local 可以定位到配置文件\r\n    对我而言,一般只配置用户级别就够了\r\n\r\n## 建立仓库\r\n   \r\n```log\r\n找个空文件夹\r\n通过命令 git init 把这个目录变成git可以管理的仓库\r\n举个栗子:\r\n[2017/8/14 11:10:25] ? guang@www  ~/git/repositories/demo  pwd\r\n[2017/8/14 11:10:25] /home/guang/git/repositories/demo\r\n[2017/8/14 11:10:30] ? guang@www  ~/git/repositories/demo  git init\r\n[2017/8/14 11:10:30] Initialized empty Git repository in /home/guang/git/repositories/demo/.git/\r\n[2017/8/14 11:10:33] ? guang@www  ~/git/repositories/demo git:(master) ls -al\r\n[2017/8/14 11:10:33] total 0\r\n[2017/8/14 11:10:33] drwxrwxr-x 3 guang guang  17 Aug 14 20:10 .\r\n[2017/8/14 11:10:33] drwxrwxr-x 3 guang guang  17 Aug 14 20:10 ..\r\n[2017/8/14 11:10:33] drwxrwxr-x 7 guang guang 111 Aug 14 20:10 .git\r\n```\r\n## 提交文件\r\n```log\r\n[2017/8/14 11:12:47] ? guang@www  ~/git/repositories/demo git:(master) vi readme.txt\r\n[2017/8/14 11:13:38] ? guang@www  ~/git/repositories/demo git:(master) ? git add readme.txt        //将文件提交到暂存区\r\n[2017/8/14 11:14:11] ? guang@www  ~/git/repositories/demo git:(master) ? git commit -m \"提交readme文件\"        //将文件提交到本地库\r\n[2017/8/14 11:14:11] [master (root-commit) 2d2a29e] 提交readme文件\r\n[2017/8/14 11:14:11]  1 file changed, 11 insertions(+)\r\n[2017/8/14 11:14:11]  create mode 100644 readme.txt\r\n\r\n[2017/8/14 11:15:07] ? guang@www  ~/git/repositories/demo git:(master) vi readme.txt          //修改文件\r\n[2017/8/14 11:18:04] ? guang@www  ~/git/repositories/demo git:(master) ? git diff readme.txt         //查看文件与本地库文件之间的差异\r\n[2017/8/14 11:19:14] ? guang@www  ~/git/repositories/demo git:(master) ? git add .                        //提交编辑后的文件到暂存区\r\n[2017/8/14 11:19:37] ? guang@www  ~/git/repositories/demo git:(master) ? git commit -m \"提交readme.txt修改\"        //提交编辑后的文件到本地库\r\n[2017/8/14 11:19:37] [master 51583d6] 提交readme.txt修改\r\n[2017/8/14 11:19:37]  1 file changed, 4 insertions(+)\r\n```\r\n\r\n## 版本回退\r\n```log\r\n[2017/8/14 11:26:35] ? guang@www  ~/git/repositories/demo git:(master) vi readme.txt \r\n[2017/8/14 11:27:27] ? guang@www  ~/git/repositories/demo git:(master) ? git add readme.txt \r\n[2017/8/14 11:27:43] ? guang@www  ~/git/repositories/demo git:(master) ? git commit -m \"第三次提交\"\r\n[2017/8/14 11:27:43] [master fb81a87] 第三次提交\r\n[2017/8/14 11:27:43]  1 file changed, 2 insertions(+)\r\n[2017/8/14 11:27:59] ? guang@www  ~/git/repositories/demo git:(master) git log        //使用git log 可以查看我们版本日志,日志里有每一个版本的标识符,通过标识符可以进行版本管理 git reset --hard HEAD 版本号\r\n[2017/8/14 11:29:45] ? guang@www  ~/git/repositories/demo git:(master) git reset --hard HEAD^        //but,实际上我通常只会回退1到2个版本,可以通过这样在HEAD后面添加^来回退版本,^^ == 两个版本,类推之\r\n[2017/8/14 11:29:45] HEAD is now at 51583d6 提交readme.txt修改\r\n\r\n//但是,我刚回退到上一个版本,我就后悔了,想要撤销回退,使用git log 发现找不到版本号,怎么办\r\n//使用git reflog,这里记录的是版本操作记录,如下\r\n[2017/8/14 11:38:44] ? guang@www  ~/git/repositories/demo git:(master) git reflog\r\n    51583d6 HEAD@{0}: reset: moving to HEAD^\r\n    fb81a87 HEAD@{1}: commit: 第三次提交\r\n    51583d6 HEAD@{2}: commit: 提交readme.txt修改\r\n    2d2a29e HEAD@{3}: commit (initial): 提交readme文件\r\n```\r\n\r\n```log\r\n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。\r\n\r\n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。\r\n\r\n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，git reset HEAD^\r\n```\r\n\r\n## 删除文件\r\n```logs\r\n[2017/8/14 13:22:27] ? guang@www  ~/git/repositories/demo git:(master) ? git rm a.txt\r\n[2017/8/14 13:22:27] rm \'a.txt\'\r\n[2017/8/14 13:22:46] ? guang@www  ~/git/repositories/demo git:(master) ? git commit -m \"rm a.txt\"\r\n[2017/8/14 13:22:46] [master 88e1a60] rm a.txt\r\n[2017/8/14 13:22:46]  1 file changed, 7 deletions(-)\r\n[2017/8/14 13:22:46]  delete mode 100644 a.txt\r\n```\r\n\r\n## 关于远程仓库\r\n```log\r\n都知道git的一个长处就是他的远程仓库,\r\n这个远程仓库既可以是我们自己维护的一个中央的仓库管理服务器,\r\n也可以是github等网上提供的中央的仓库管理服务器\r\n\r\nMD,github有毒,我提交上去的信息全被吃了,我的天\r\n这个bug恢复前,再也不把东西放到github上了,草\r\n\r\n没办法,只好自己搭建一个远程的服务器\r\n其实,我们本机上的仓库本身就是一个服务器,因为git是分布式,并没有中央仓库一说,中央仓库只是方便我们逻辑理解\r\nok\r\n既然如何,步骤如下:\r\n\r\n进入到远程服务器\r\n ssh guang@192.168.126.136\r\n进入以后新建一个空的仓库\r\n/home/guang/git/repositories/git_wsdssm\r\ngit init --bare guang\r\n退出远程服务器\r\n\r\n到需要提交的文件的目录里面\r\n/d/Repositories/Git/repositorie/git_wsdssm\r\n在需要提交的文件目录里初始化\r\ngit init\r\n添加到远程仓库\r\ngit remote add origin guang@192.168.126.136:/home/guang/git/repositories/git_wsdssm/guang\r\n开始添加 项目\r\ngit add -A\r\ngit commit -m \'***\'\r\n\r\n推送到远程服务器\r\ngit push --set-upstream origin master -- 第一次使用这个\r\ngit push -- 第一次以后都用这个就可以\r\n\r\n另外需要注意的是:在远程服务器上是看不到这些仓库的结构的,哈哈哈\r\n别想着去远程服务器上去验证\r\n但是可以吧仓库拉到另外一台客户端(或者客户端的另外一个目录就行了)来证明仓库在服务器的确存在.\r\n\r\n``` \r\n\r\n## 分支\r\n```log\r\n查看分支：git branch\r\n创建分支：git branch name\r\n切换分支：git checkout name\r\n创建+切换分支：git checkout –b name\r\n合并某分支到当前分支：git merge name\r\n删除分支：git branch –d name\r\n```\r\n\r\n', '1', 'post', 'publish', 'none', '默认分类', '36', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('23', 'docker(2)', null, '1503987916', '1503992100', '# docker-practise\r\n\r\n\r\nlinks docs\r\n\r\n 1. <a href=\"https://yeasy.gitbooks.io/docker_practice/content/\" target=\"_blank\">Docker — 从入门到实践</a>\r\n\r\n\r\n\r\n\r\n## install docker\r\n```install docker\r\n+ 在CentOS7上安装\r\n	++ 官方安装脚本curl -sSL https://get.docker.com/ | sh\r\n	++ 墙可能会造成干扰,那么可以使用国内的开源安装脚本\r\n	++ 阿里云curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh -\r\n```\r\n\r\n## helloworld\r\n```helloworld\r\n+ 获取helloworld镜像\r\n	++ 获取镜像的指令格式\r\n	++ docker pull [选项] [Docker Registry地址]<仓库名>:<标签>\r\n		+++ Docker Registry地址：地址的格式一般是 <域名/IP>[:端口号] 。默认地址是Docker Hub\r\n		+++ 仓库名: <用户名>/<软件名>,用户名用于作为一个命名空间一样的标识,\r\n		下面我们自己建立一个镜像时会按照这种格式常见,用于与别人的镜像进行区分.\r\n		for example ,我下面的都会依照guang/softwarename来创建\r\n		用户名默认为 library\r\n		+++ 标签默认为latest\r\n```\r\n## 运行镜像\r\n```log\r\n+ docker run docker.io/hello-world\r\n+ 下面是输出\r\n\r\n	Hello from Docker!\r\n	This message shows that your installation appears to be working correctly.\r\n\r\n	To generate this message, Docker took the following steps:\r\n	 1. The Docker client contacted the Docker daemon.	//docker客户端请求docker服务\r\n	 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.	//docker服务向Docker Hub发送请求,获取镜像\r\n	 3. The Docker daemon created a new container from that image which runs the	\r\n	    executable that produces the output you are currently reading.	//docker服务运行指定镜像为容器\r\n	 4. The Docker daemon streamed that output to the Docker client, which sent it\r\n	    to your terminal.	//docker客户端获取docker服务传递过来的文本信息(就是现在你在看的这段文本)\r\n\r\n	To try something more ambitious, you can run an Ubuntu container with:\r\n	 $ docker run -it ubuntu bash	//helloworld以后,可以玩点更刺激的,比如搞一个ubuntu容器\r\n\r\n	Share images, automate workflows, and more with a free Docker ID:\r\n	 https://cloud.docker.com/	//docker云\r\n\r\n	For more examples and ideas, visit:\r\n	 https://docs.docker.com/engine/userguide/	//docker参考文档\r\n\r\n	\r\n+ 查看镜像\r\n	++ docker images\r\n```\r\n## 使用Dockerfile定制镜像\r\n```log\r\n+ docker commit制作镜像	//too many shortcoming\r\n+ what is dockerfile\r\n	++ 把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像\r\n	++ every instruction in docker will create a layer,\r\n+ make nginx as an example:\r\n	-- [root@www ~]# mkdir dockerdir\r\n	-- [root@www ~]# cd dockerdir/\r\n	-- [root@www dockerdir]# mkdir dockerfiles\r\n	-- [root@www dockerdir]# cd dockerfiles/\r\n	-- [root@www dockerfiles]# touch Dockerfile\r\n	-- [root@www dockerfiles]# vi Dockerfile\r\n	-- FROM nginx\r\n	-- RUN echo \'<h1>Hello, Docker!,i am your greatest master guang</h1>\' > /usr/share/nginx/html/index.html\r\n	-- 在dockerfile文件牧流执行(上下文路径)执行docker build -t nginx:v3 .\r\n	-- 以下为输出\r\n\r\n		[root@www dockerfiles]# docker build -t nginx:v3 .\r\n		Sending build context to Docker daemon 2.048 kB		//向docker服务发送构建所需要的数据\r\n		Step 1 : FROM nginx	//获取源镜像\r\n		 ---> b8efb18f159b	\r\n		Step 2 : RUN echo \'<h1>Hello, Docker!,i am your greatest master guang</h1>\' > /usr/share/nginx/html/index.html		//执行指令,创建一个层\r\n		 ---> Running in f58735914e8e	//运行容器,容器id为f58735914e8e\r\n		 ---> 95a17e236aa7	//添加新层95a17e236aa7\r\n		Removing intermediate container f58735914e8e	//删除原来的容器f58735914e8e\r\n		Successfully built 95a17e236aa7		//将新层id作为镜像id构建镜像\r\n+ 查看构建结果\r\n+ [root@www dockerfiles]# docker images\r\n	--以下下为输出	\r\n\r\n		REPOSITORY                 TAG                 IMAGE ID            CREATED             SIZE\r\n		nginx                      v3                  95a17e236aa7        15 minutes ago      107.5 MB    \r\n		da/docker-mysql            latest              7929e796a4fa        3 weeks ago         412.3 MB\r\n		nginx                      2.0                 0cbc91fca9c1        4 weeks ago         107.5 MB\r\n		docker.io/nginx            latest              b8efb18f159b        4 weeks ago         107.5 MB\r\n		docker.io/mysql            5.7                 c73c7527c03a        4 weeks ago         412.3 MB\r\n		docker.io/mysql            latest              c73c7527c03a        4 weeks ago         412.3 MB\r\n		docker.io/ubuntu           14.04               54333f1de4ed        5 weeks ago         188 MB\r\n		docker.io/centos           latest              36540f359ca3        7 weeks ago         192.5 MB\r\n		docker.io/docker/compose   1.14.0              c75d0b12cd81        10 weeks ago        18.95 MB\r\n		docker.io/hello-world      latest              1815c82652c0        10 weeks ago        1.84 kB\r\n                 //握草,镜像都是这么大的吗,感觉我的虚拟机要被撑爆了~~~(╯‵□′)╯︵┻━┻\r\n+ 运行新构建的镜像nginx:v3\r\n	-- 以下为输出\r\n		[root@www dockerfiles]# docker run -d -p 88:80 nginx:v3\r\n		210228ac08ca134ec74e3f3f10a27844a8d9679f507e7c0bfa1e376be8110354\r\n	-- 然后有图有真相https://github.com/imshadowurlight/photo/blob/master/images/201708291446.png?raw=true\r\n+ 总结上面的栗子\r\n	++ FROM指令指定一个基础镜像,or scrratch(空白镜像,你喜欢瞎折腾的话,go的应用比较偏好这种形式)\r\n	++ RUN 指令是用来执行命令行命令的\r\n	++ 构建镜像的指令格式 docker build [选项] <上下文路径/URL/->\r\n\r\n		\r\n+ 关于上下文路径\r\n	++ 用户在构建时指定的路径就是上下文路径\r\n	++ 上下文路径的作用是提供给dockerfile指令使用的\r\n	++ 用来把需要传递的数据传递给docker daemon服务\r\n	++ docker daemon则负责构建动作\r\n	++ for example :\r\n		+++ copy ./a.sh /app/		//表示复制上下文路径的a.sh文件到指定位置\r\n\r\n+ 删除镜像\r\n	++ 镜像实在太多了,怎么办,把没用的删掉啊\r\n	++ 格式docker rmi imageid\r\n	++ 以下为输出\r\n		[root@www dockerfiles]# docker rmi 54333f1de4ed\r\n		Untagged: docker.io/ubuntu:14.04\r\n		Untagged: docker.io/ubuntu@sha256:13eecbc0e57928c1cb3ccca3581e2a6f4b0f39c1acf5a279e740e478accd119b\r\n		Deleted: sha256:54333f1de4ed2730bea18e49605b2ea8f8a2689db213ece94db6ccbc8cf279a6\r\n		Deleted: sha256:35d8894ce7dec2b41f8cdf0736569fae1945d8434acc056c78fd6eeaac44f027\r\n		Deleted: sha256:583156420c0bca3bc6c9219c69dbc501499648067b721ce8f49bc383cc6f77cf\r\n		Deleted: sha256:2f8a4457139f4ca96153c5ca283c11d950a76691727ad367774b4016c8dde64b\r\n		Deleted: sha256:8d5c0b1b8aa48e146e6be08651193df6f2962866ef0118bbed430aaf8d68db6b\r\n		Deleted: sha256:1b0c71361973f3ff1a6b34982df3e4b702465b99e618112a8a1a80ccdbf9d6be\r\n		[root@www dockerfiles]# docker rmi 36540f359ca3\r\n		Untagged: docker.io/centos:latest\r\n		Untagged: docker.io/centos@sha256:c1010e2fe2b635822d99a096b1f4184becf5d1c98707cbccae00be663a9b9131\r\n		Deleted: sha256:36540f359ca3b021d4b6a37815e9177b6c2bb3817598979ea55aee7ecc5c2c1f\r\n		Deleted: sha256:99b28d9413e47df267df84318788754dd39d4c8e0dc2c72c9e8922b3a91f21fa	\r\n        ++ 如果数量太多要一个个删除可能会很麻烦，用 docker rm $(docker ps -a -q) 可以全部清理掉\r\n+ 想查看运行中的容器\r\n	++ docker ps \r\n	++ docker ps -a\r\n\r\n```\r\n\r\n![访问nignx:v3][1]\r\n\r\n\r\n  [1]: https://github.com/imshadowurlight/photo/blob/master/images/201708291446.png?raw=true', '1', 'post', 'publish', 'none', 'default', '26', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('24', 'docker(3)', null, '1503992152', '1503993768', '# 关于运行容器\r\n\r\n```log\r\n+ 具体的指令可以请教help,我一定是失了智才把他抄了一遍(╯‵□′)╯︵┻━┻\r\n+ 以下为输出\r\n	[root@www dockerfiles]# docker run --help\r\n\r\n	Usage:	docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\r\n\r\n	Run a command in a new container\r\n\r\n	Options:\r\n	      --add-host value              Add a custom host-to-IP mapping (host:ip) (default [])\r\n	  -a, --attach value                Attach to STDIN, STDOUT or STDERR (default [])\r\n	      --blkio-weight value          Block IO (relative weight), between 10 and 1000\r\n	      --blkio-weight-device value   Block IO weight (relative device weight) (default [])\r\n	      --cap-add value               Add Linux capabilities (default [])\r\n	      --cap-drop value              Drop Linux capabilities (default [])\r\n	      --cgroup-parent string        Optional parent cgroup for the container\r\n	      --cidfile string              Write the container ID to the file\r\n	      --cpu-percent int             CPU percent (Windows only)\r\n	      --cpu-period int              Limit CPU CFS (Completely Fair Scheduler) period\r\n	      --cpu-quota int               Limit CPU CFS (Completely Fair Scheduler) quota\r\n	  -c, --cpu-shares int              CPU shares (relative weight)\r\n	      --cpuset-cpus string          CPUs in which to allow execution (0-3, 0,1)\r\n	      --cpuset-mems string          MEMs in which to allow execution (0-3, 0,1)\r\n	  -d, --detach                      Run container in background and print container ID\r\n	      --detach-keys string          Override the key sequence for detaching a container\r\n	      --device value                Add a host device to the container (default [])\r\n	      --device-read-bps value       Limit read rate (bytes per second) from a device (default [])\r\n	      --device-read-iops value      Limit read rate (IO per second) from a device (default [])\r\n	      --device-write-bps value      Limit write rate (bytes per second) to a device (default [])\r\n	      --device-write-iops value     Limit write rate (IO per second) to a device (default [])\r\n	      --disable-content-trust       Skip image verification (default true)\r\n	      --dns value                   Set custom DNS servers (default [])\r\n	      --dns-opt value               Set DNS options (default [])\r\n	      --dns-search value            Set custom DNS search domains (default [])\r\n	      --entrypoint string           Overwrite the default ENTRYPOINT of the image\r\n	  -e, --env value                   Set environment variables (default [])\r\n	      --env-file value              Read in a file of environment variables (default [])\r\n	      --expose value                Expose a port or a range of ports (default [])\r\n	      --group-add value             Add additional groups to join (default [])\r\n	      --health-cmd string           Command to run to check health\r\n	      --health-interval duration    Time between running the check (default 0s)\r\n	      --health-retries int          Consecutive failures needed to report unhealthy\r\n	      --health-timeout duration     Maximum time to allow one check to run (default 0s)\r\n	      --help                        Print usage\r\n	  -h, --hostname string             Container host name\r\n	  -i, --interactive                 Keep STDIN open even if not attached\r\n	      --io-maxbandwidth string      Maximum IO bandwidth limit for the system drive (Windows only)\r\n	      --io-maxiops uint             Maximum IOps limit for the system drive (Windows only)\r\n	      --ip string                   Container IPv4 address (e.g. 172.30.100.104)\r\n	      --ip6 string                  Container IPv6 address (e.g. 2001:db8::33)\r\n	      --ipc string                  IPC namespace to use\r\n	      --isolation string            Container isolation technology\r\n	      --kernel-memory string        Kernel memory limit\r\n	  -l, --label value                 Set meta data on a container (default [])\r\n	      --label-file value            Read in a line delimited file of labels (default [])\r\n	      --link value                  Add link to another container (default [])\r\n	      --link-local-ip value         Container IPv4/IPv6 link-local addresses (default [])\r\n	      --log-driver string           Logging driver for the container\r\n	      --log-opt value               Log driver options (default [])\r\n	      --mac-address string          Container MAC address (e.g. 92:d0:c6:0a:29:33)\r\n	  -m, --memory string               Memory limit\r\n	      --memory-reservation string   Memory soft limit\r\n	      --memory-swap string          Swap limit equal to memory plus swap: \'-1\' to enable unlimited swap\r\n	      --memory-swappiness int       Tune container memory swappiness (0 to 100) (default -1)\r\n	      --name string                 Assign a name to the container\r\n	      --network string              Connect a container to a network (default \"default\")\r\n	      --network-alias value         Add network-scoped alias for the container (default [])\r\n	      --no-healthcheck              Disable any container-specified HEALTHCHECK\r\n	      --oom-kill-disable            Disable OOM Killer\r\n	      --oom-score-adj int           Tune host\'s OOM preferences (-1000 to 1000)\r\n	      --pid string                  PID namespace to use\r\n	      --pids-limit int              Tune container pids limit (set -1 for unlimited)\r\n	      --privileged                  Give extended privileges to this container\r\n	  -p, --publish value               Publish a container\'s port(s) to the host (default [])\r\n	  -P, --publish-all                 Publish all exposed ports to random ports\r\n	      --read-only                   Mount the container\'s root filesystem as read only\r\n	      --restart string              Restart policy to apply when a container exits (default \"no\")\r\n	      --rm                          Automatically remove the container when it exits\r\n	      --runtime string              Runtime to use for this container\r\n	      --security-opt value          Security Options (default [])\r\n	      --shm-size string             Size of /dev/shm, default value is 64MB\r\n	      --sig-proxy                   Proxy received signals to the process (default true)\r\n	      --stop-signal string          Signal to stop a container, SIGTERM by default (default \"SIGTERM\")\r\n	      --storage-opt value           Storage driver options for the container (default [])\r\n	      --sysctl value                Sysctl options (default map[])\r\n	      --tmpfs value                 Mount a tmpfs directory (default [])\r\n	  -t, --tty                         Allocate a pseudo-TTY\r\n	      --ulimit value                Ulimit options (default [])\r\n	  -u, --user string                 Username or UID (format: <name|uid>[:<group|gid>])\r\n	      --userns string               User namespace to use\r\n	      --uts string                  UTS namespace to use\r\n	  -v, --volume value                Bind mount a volume (default [])\r\n	      --volume-driver string        Optional volume driver for the container\r\n	      --volumes-from value          Mount volumes from the specified container(s) (default [])\r\n	  -w, --workdir string              Working directory inside the container\r\n\r\n+ 还是举个栗子把\r\n	++ docker run -d -p 13306:3306 da/docker-mysql\r\n	++ docker stop bd90aba67701	//bd90aba67701是da/docker-mysql的container id\r\n	++ docker start bd90aba67701\r\n	\r\n+ run的标准过程		//虽然狗血,还是抄一遍把\r\n	-- 检查本地是否存在指定的镜像，不存在就从公有仓库下载\r\n	-- 启动\r\n	-- 101\r\n	-- 利用镜像创建并启动一个容器\r\n	-- 分配一个文件系统，并在只读的镜像层外面挂载一层可读写层\r\n	-- 从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去\r\n	-- 从地址池配置一个 ip 地址给容器\r\n	-- 执行用户指定的应用程序\r\n	-- 执行完毕后容器被终止\r\n```\r\n# 如何查询我要要的镜像\r\n```log\r\n+ docker search image-keyword\r\n	++ 举个栗子\r\n	-- 以下为输出\r\n		[root@www dockerfiles]# docker search centos\r\n		INDEX       NAME                                         DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\r\n		docker.io   docker.io/centos                             The official build of CentOS.                   3590      [OK]       \r\n		docker.io   docker.io/ansible/centos7-ansible            Ansible on Centos7                              100                  [OK]\r\n		docker.io   docker.io/jdeathe/centos-ssh                 CentOS-6 6.9 x86_64 / CentOS-7 7.3.1611 x8...   81                   [OK]\r\n		[root@www dockerfiles]# docker search nginx\r\n		INDEX       NAME                                         DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED\r\n		docker.io   docker.io/nginx                              Official build of Nginx.                        6719      [OK]       \r\n		docker.io   docker.io/jwilder/nginx-proxy                Automated Nginx reverse proxy for docker c...   1098                 [OK]\r\n		docker.io   docker.io/richarvey/nginx-php-fpm            Container running Nginx + PHP-FPM capable ...   430                  [OK]\r\n	--很明显地有官方镜像和一些热情网友上传的自定义镜像,附带着镜像的描述,标星的数量etc\r\n\r\n+ 拉取+推送\r\n	++ docker pull image-name\r\n	++ docker push image-name\r\n```\r\n\r\n# docker-registry创建私有仓库\r\n<del>这个,额,再说吧,小弟不太感兴趣,就先不搞了</del>', '1', 'post', 'publish', 'none', 'default', '8', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('25', 'docker(4)--volume', null, '1503995636', '1504054664', '# 数据管理\r\n```log\r\n+ 如何在 Docker 内部以及容器之间管理数据，在容器中管理数据主要有\r\n	++ 数据卷（Data volumes）\r\n	++ 数据卷容器（Data volume containers）\r\n```\r\n\r\n# Data volumes\r\n**特点**\r\n1. 数据卷可以在容器之间共享和重用\r\n2. 对数据卷的修改会立马生效\r\n3. 对数据卷的更新，不会影响镜像\r\n4. 数据卷默认会一直存在，即使容器被删除\r\n\r\n**别人的解释还是很清楚的**<br />\r\n数据卷的使用，类似于 Linux 下对目录或文件进行 mount，\r\n镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的数据卷\r\n\r\n```log\r\n+ 创建一个数据卷\r\n+ docker run -d -P --name web -v /webapp training/webapp python app.py\r\n	-- 我的系统中并没有/webapp目录,\r\n	-- 执行指令后也没有自动生成目录,\r\n	-- 我感受到世界对萌新深深的恶意(╯‵□′)╯︵┻━┻\r\n+ 查看指定容器的信息\r\n+ docker inspect web\r\n	++ 以下为输出\r\n		[\r\n		    {\r\n			\"Id\": \"69ee4fd80e02fe400a031a3bd147b711912a63bb67f5083316b342e6d698e47f\",\r\n			\"Created\": \"2017-08-29T08:12:31.499994305Z\",\r\n			\"Path\": \"python\",\r\n			\"Args\": [\r\n			    \"app.py\"\r\n			],\r\n			\"State\": {\r\n			    \"Status\": \"running\",\r\n			    \"Running\": true,\r\n			    \"Paused\": false,\r\n			    \"Restarting\": false,\r\n			    \"OOMKilled\": false,\r\n			    \"Dead\": false,\r\n			    \"Pid\": 8116,\r\n			    \"ExitCode\": 0,\r\n			    \"Error\": \"\",\r\n			    \"StartedAt\": \"2017-08-29T08:12:34.745609239Z\",\r\n			    \"FinishedAt\": \"0001-01-01T00:00:00Z\"\r\n			},\r\n			\"Image\": \"sha256:6fae60ef344644649a39240b94d73b8ba9c67f898ede85cf8e947a887b3e6557\",\r\n			\"ResolvConfPath\": \"/var/lib/docker/containers/69ee4fd80e02fe400a031a3bd147b711912a63bb67f5083316b342e6d698e47f/resolv.conf\",\r\n			\"HostnamePath\": \"/var/lib/docker/containers/69ee4fd80e02fe400a031a3bd147b711912a63bb67f5083316b342e6d698e47f/hostname\",\r\n			\"HostsPath\": \"/var/lib/docker/containers/69ee4fd80e02fe400a031a3bd147b711912a63bb67f5083316b342e6d698e47f/hosts\",\r\n			\"LogPath\": \"\",\r\n			\"Name\": \"/web\",\r\n			\"RestartCount\": 0,\r\n			\"Driver\": \"devicemapper\",\r\n			\"MountLabel\": \"system_u:object_r:svirt_sandbox_file_t:s0:c573,c926\",\r\n			\"ProcessLabel\": \"system_u:system_r:svirt_lxc_net_t:s0:c573,c926\",\r\n			\"AppArmorProfile\": \"\",\r\n			\"ExecIDs\": null,\r\n			\"HostConfig\": {\r\n			    \"Binds\": null,\r\n			    \"ContainerIDFile\": \"\",\r\n			    \"LogConfig\": {\r\n				\"Type\": \"journald\",\r\n				\"Config\": {}\r\n			    },\r\n			    \"NetworkMode\": \"default\",\r\n			    \"PortBindings\": {},\r\n			    \"RestartPolicy\": {\r\n				\"Name\": \"no\",\r\n				\"MaximumRetryCount\": 0\r\n			    },\r\n			    \"AutoRemove\": false,\r\n			    \"VolumeDriver\": \"\",		//发现了没,这货根本没有volume好吗,擦\r\n			    \"VolumesFrom\": null,	//	\r\n			    \"CapAdd\": null,\r\n			    \"CapDrop\": null,\r\n			    \"Dns\": [],\r\n			    \"DnsOptions\": [],\r\n			    \"DnsSearch\": [],\r\n			    \"ExtraHosts\": null,\r\n			    \"GroupAdd\": null,\r\n			    \"IpcMode\": \"\",\r\n			    \"Cgroup\": \"\",\r\n			    \"Links\": null,\r\n			    \"OomScoreAdj\": 0,\r\n			    \"PidMode\": \"\",\r\n			    \"Privileged\": false,\r\n			    \"PublishAllPorts\": true,\r\n			    \"ReadonlyRootfs\": false,\r\n			    \"SecurityOpt\": null,\r\n			    \"UTSMode\": \"\",\r\n			    \"UsernsMode\": \"\",\r\n			    \"ShmSize\": 67108864,\r\n			    \"Runtime\": \"docker-runc\",\r\n			    \"ConsoleSize\": [\r\n				0,\r\n				0\r\n			    ],\r\n			    \"Isolation\": \"\",\r\n			    \"CpuShares\": 0,\r\n			    \"Memory\": 0,\r\n			    \"CgroupParent\": \"\",\r\n			    \"BlkioWeight\": 0,\r\n			    \"BlkioWeightDevice\": null,\r\n			    \"BlkioDeviceReadBps\": null,\r\n			    \"BlkioDeviceWriteBps\": null,\r\n			    \"BlkioDeviceReadIOps\": null,\r\n			    \"BlkioDeviceWriteIOps\": null,\r\n			    \"CpuPeriod\": 0,\r\n			    \"CpuQuota\": 0,\r\n			    \"CpusetCpus\": \"\",\r\n			    \"CpusetMems\": \"\",\r\n			    \"Devices\": [],\r\n			    \"DiskQuota\": 0,\r\n			    \"KernelMemory\": 0,\r\n			    \"MemoryReservation\": 0,\r\n			    \"MemorySwap\": 0,\r\n			    \"MemorySwappiness\": -1,\r\n			    \"OomKillDisable\": false,\r\n			    \"PidsLimit\": 0,\r\n			    \"Ulimits\": null,\r\n			    \"CpuCount\": 0,\r\n			    \"CpuPercent\": 0,\r\n			    \"IOMaximumIOps\": 0,\r\n			    \"IOMaximumBandwidth\": 0\r\n			},\r\n			\"GraphDriver\": {\r\n			    \"Name\": \"devicemapper\",\r\n			    \"Data\": {\r\n				\"DeviceId\": \"158\",\r\n				\"DeviceName\": \"docker-253:0-915349-be892e76241c0c8022b9fadd8582283871427e95e1e64a6667a77cf23c2200c3\",\r\n				\"DeviceSize\": \"10737418240\"\r\n			    }\r\n			},\r\n			\"Mounts\": [\r\n			    {\r\n				\"Name\": \"792de69115a01d180efecb86febbf44b216ecf74b77d8d1d192b1ff5c920fb4a\",\r\n				\"Source\": \"/var/lib/docker/volumes/792de69115a01d180efecb86febbf44b216ecf74b77d8d1d192b1ff5c920fb4a/_data\",	//马萨卡,是在这里 ,吓得我赶紧跑去目录下去看看,我擦嘞,还真是\r\n				\"Destination\": \"/webapp\",\r\n				\"Driver\": \"local\",\r\n				\"Mode\": \"\",\r\n				\"RW\": true,\r\n				\"Propagation\": \"\"\r\n			    }\r\n			],\r\n			\"Config\": {\r\n			    \"Hostname\": \"69ee4fd80e02\",\r\n			    \"Domainname\": \"\",\r\n			    \"User\": \"\",\r\n			    \"AttachStdin\": false,\r\n			    \"AttachStdout\": false,\r\n			    \"AttachStderr\": false,\r\n			    \"ExposedPorts\": {\r\n				\"5000/tcp\": {}\r\n			    },\r\n			    \"Tty\": false,\r\n			    \"OpenStdin\": false,\r\n			    \"StdinOnce\": false,\r\n			    \"Env\": [\r\n				\"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\r\n			    ],\r\n			    \"Cmd\": [\r\n				\"python\",\r\n				\"app.py\"\r\n			    ],\r\n			    \"Image\": \"training/webapp\",\r\n			    \"Volumes\": {\r\n				\"/webapp\": {}		//???\r\n			    },\r\n			    \"WorkingDir\": \"/opt/webapp\",\r\n			    \"Entrypoint\": null,\r\n			    \"OnBuild\": null,\r\n			    \"Labels\": {}\r\n			},\r\n			\"NetworkSettings\": {\r\n			    \"Bridge\": \"\",\r\n			    \"SandboxID\": \"0ac74310b78dbf2d2daf6d7e0db267fc4263c02ab8048fb01d038fdc467f1d3e\",\r\n			    \"HairpinMode\": false,\r\n			    \"LinkLocalIPv6Address\": \"\",\r\n			    \"LinkLocalIPv6PrefixLen\": 0,\r\n			    \"Ports\": {\r\n				\"5000/tcp\": [\r\n				    {\r\n					\"HostIp\": \"0.0.0.0\",\r\n					\"HostPort\": \"32769\"\r\n				    }\r\n				]\r\n			    },\r\n			    \"SandboxKey\": \"/var/run/docker/netns/0ac74310b78d\",\r\n			    \"SecondaryIPAddresses\": null,\r\n			    \"SecondaryIPv6Addresses\": null,\r\n			    \"EndpointID\": \"d7068baf1218d3920b15b3f1e6282eea61cff2e9e86c2f0deffd9c7f0112f2b6\",\r\n			    \"Gateway\": \"172.17.0.1\",\r\n			    \"GlobalIPv6Address\": \"\",\r\n			    \"GlobalIPv6PrefixLen\": 0,\r\n			    \"IPAddress\": \"172.17.0.4\",\r\n			    \"IPPrefixLen\": 16,\r\n			    \"IPv6Gateway\": \"\",\r\n			    \"MacAddress\": \"02:42:ac:11:00:04\",\r\n			    \"Networks\": {\r\n				\"bridge\": {\r\n				    \"IPAMConfig\": null,\r\n				    \"Links\": null,\r\n				    \"Aliases\": null,\r\n				    \"NetworkID\": \"61845933e3729f5591757632d4b006316131d6697669e8caa4ae7324b9050b7b\",\r\n				    \"EndpointID\": \"d7068baf1218d3920b15b3f1e6282eea61cff2e9e86c2f0deffd9c7f0112f2b6\",\r\n				    \"Gateway\": \"172.17.0.1\",\r\n				    \"IPAddress\": \"172.17.0.4\",\r\n				    \"IPPrefixLen\": 16,\r\n				    \"IPv6Gateway\": \"\",\r\n				    \"GlobalIPv6Address\": \"\",\r\n				    \"GlobalIPv6PrefixLen\": 0,\r\n				    \"MacAddress\": \"02:42:ac:11:00:04\"\r\n				}\r\n			    }\r\n			}\r\n		    }\r\n		]\r\n	++ 一番侦查,发现volume在 /var/lib/docker/volumes/792de69115a01d180efecb86febbf44b216ecf74b77d8d1d192b1ff5c920fb4a/_data\r\n	++ 顺便还发现了许多的volume,这些东西是什么时候生成的啊,握草,果真是docker毒瘤,\r\n	++ 如果volume不是你想要保留的数据,请在删除容器的时候带上参数-v (就是volume的意思咯)\r\n+ 搞了一圈下来我就有点蒙B了,我不是挂在了一个目录给容器当volume吗,那为什么生成的volume的位置和我指定的目录一点关系都没有		\r\n	-- 如果有哪位大神刚好路过,请务必告诉我这是为啥,萌新已哭晕在厕所(╯‵□′)╯︵┻━┻\r\n\r\n\r\n```', '1', 'post', 'publish', 'none', 'default', '3', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('26', 'docker(5)--数据卷容器', null, '1504054761', '1504063651', '# Docker Compose\r\n1. Dockerfile负责创建单个镜像\r\n2. Compose则负责通过docker-compose.yml(YAML格式文件)组合多个镜像成为一个整体的应用系统\r\n3. 上面的单独的镜像/容器在这里称为\"服务service\",整体的应用系统则称为\"项目project\"	\r\n//MLGJ,能不能不搞这么多概念a,虽然能明白,也能记得住,但就是不爽(╯‵□′)╯︵┻━┻\r\n\r\n**以下是摘抄**<br />\r\n1. Compose 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理\r\n2. Compose 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理	//docker本身则是go写的\r\n\r\n# 安装\r\n<a href=\"http://www.ttlsa.com/shell/docker-compose-onekey-install/\" target=\"_blank\">快速安装脚本,拿走不谢</a>\r\n\r\n# 创建一个项目作为一个栗子(可耻的抄袭)\r\n```log	\r\n+ 创建一个经典的 Web 项目：一个 Haproxy，挂载三个 Web 容器。\r\n+ 创建一个 compose-haproxy-web 目录，作为项目工作目录，并在其中分别创建两个子目录： haproxy 和 web\r\n	cd ~\r\n	cd dockerdir/\r\n	mkdir projects\r\n	cd projects/\r\n	mkdir compose-haproxy-web\r\n	cd compose-haproxy-web/\r\n	mkdir haproxy\r\n	mkdir web\r\n+ 在web目录下,用 Python 程序来提供一个简单的 HTTP 服务，打印出访问者的 IP 和 实际的本地 IP\r\n+ 编写一个 index.py 作为服务器文件，代码为\r\n\r\n	#!/usr/bin/python\r\n\r\n	#authors: yeasy.github.com# date: 2013 - 07 - 05\r\n	import sys\r\n	import BaseHTTPServer\r\n	from SimpleHTTPServer\r\n	import SimpleHTTPRequestHandler\r\n	import socket\r\n	import fcntl\r\n	import struct\r\n	import pickle\r\n	from datetime\r\n	import datetime\r\n	from collections\r\n	import OrderedDict\r\n	class HandlerClass(SimpleHTTPRequestHandler):\r\n	    def get_ip_address(self, ifname):\r\n	    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n	return socket.inet_ntoa(fcntl.ioctl(\r\n	    s.fileno(),\r\n	    0x8915, #SIOCGIFADDR struct.pack(\'256s\', ifname[: 15])\r\n	)[20: 24])\r\n	def log_message(self, format, * args):\r\n	    if len(args) < 3 or \"200\"\r\n	not in args[1]:\r\n	    return\r\n	try:\r\n	request = pickle.load(open(\"pickle_data.txt\", \"r\"))\r\n	except:\r\n	    request = OrderedDict()\r\n	time_now = datetime.now()\r\n	ts = time_now.strftime(\'%Y-%m-%d %H:%M:%S\')\r\n	server = self.get_ip_address(\'eth0\')\r\n	host = self.address_string()\r\n	addr_pair = (host, server)\r\n	if addr_pair not in request:\r\n	    request[addr_pair] = [1, ts]\r\n	else :\r\n	    num = request[addr_pair][0] + 1\r\n	del request[addr_pair]\r\n	request[addr_pair] = [num, ts]\r\n	file = open(\"index.html\", \"w\")\r\n	file.write(\"<!DOCTYPE html> <html> <body><center><h1><fo\r\n		nt color = \\\"blue\\\" face=\\\"Georgia, Arial\\\" size=8><em>HA</em></fo\r\n		nt > Webpage Visit Results < /h1></center > \")\r\n		for pair in request:\r\n		if pair[0] == host:\r\n		guest = \"LOCAL: \" + pair[0]\r\n		else :\r\n		    guest = pair[0]\r\n\r\n		if (time_now - datetime.strptime(request[pair][1], \'%Y- % m - % d % H: % M: % S \')).seconds < 3:\r\n			file.write(\"<p style=\\\"font-size:150%\\\" >#\" + str(request[pair][1]) + \": <font color=\\\"red\\\">\" + str(request[pair][0]) + \"</font> requests \" + \"from <<font color=\\\"blue\\\">\" + guest +\r\n			    \"</font>> to WebServer <<font color=\\\"blue\\\">\" + pair[1] + \"</fo\r\n			    nt > & gt < /p>\")\r\n			    else :\r\n				file.write(\"<p style=\\\"font-size:150%\\\" >#\" + str(request[pair][1]) + \": <font color=\\\"maroon\\\">\" + str(request[pair][0]) + \"</font> requests \" + \"from <<font color=\\\"navy\\\">\" + gue st + \"</font>> to WebServer <<font color=\\\"navy\\\">\" + pair[1] + \"< / font > & gt < /p>\")\r\n				    file.write(\"</body> </html>\") file.close() pickle.dump(request, open(\"pickle_data.txt\", \"w\")) if __name__ == \'__main__\':\r\n				    try:\r\n				    ServerClass = BaseHTTPServer.HTTPServer Protocol = \"HTTP/1.0\"\r\n				    addr = len(sys.argv) < 2 and \"0.0.0.0\"\r\n				    or sys.argv[1] port = len(sys.argv) < 3 and 80 or int(sys.argv[2]) HandlerClass.protocol_version = Protocol httpd = ServerClass((addr, port), HandlerClass) sa = httpd.socket.getsockname() print \"Serving HTTP on\", sa[0], \"port\", sa[1], \"...\"\r\n				    httpd.serve_forever() except:\r\n				    exit()\r\n+ 生成一个临时的 index.html 文件，其内容会被 index.py 更新。\r\n+ touch index.html\r\n+ 写一个 Dockerfile，内容为\r\n	FROM python:2.7\r\n	WORKDIR /code\r\n	ADD . /code\r\n	EXPOSE 80\r\n	CMD python index.py	\r\n- 切换到haproxy目录,写一个 haproxy.cfg 文件，内容为:\r\n	global\r\n		log 127.0.0.1 local0\r\n		log 127.0.0.1 local1 notice\r\n	defaults\r\n		log global\r\n		mode http\r\n		option httplog\r\n		option dontlognull\r\n		timeout connect 5000 ms\r\n		timeout client 50000 ms\r\n		timeout server 50000 ms\r\n	listen stats\r\n		bind 0.0.0.0: 70\r\n		stats enable\r\n		stats uri /\r\n	frontend balancer\r\n		bind 0.0.0.0: 80\r\n		mode http\r\n		default_backend web_backends\r\n	backend web_backends\r\n		mode http\r\n		option forwardfor\r\n		balance roundrobin\r\n		server weba weba: 80 check\r\n		server webb webb: 80 check\r\n		server webc webc: 80 check\r\n		option httpchk GET /\r\n	    http - check expect status 200\r\n- 重点:docker-compose.yml\r\n- 编写 docker-compose.yml 文件，这个是 Compose 使用的主模板文件。内容十分简单，指定 3 个 web 容器，以及 1 个 haproxy 容器。\r\n	weba:\r\n		build: ./web\r\n		expose:\r\n			- 80\r\n	webb:\r\n		build: ./web\r\n		expose:\r\n			- 80\r\n	webc:\r\n		build: ./web\r\n		expose:\r\n			- 80\r\n	haproxy:\r\n		image: haproxy:latest\r\n		volumes:\r\n			- ./haproxy:/haproxy-override\r\n			- ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.c\r\n	fg:ro\r\n		links:\r\n			- weba\r\n			- webb\r\n			- webc\r\n		ports:\r\n			- \"80:80\"\r\n			- \"70:70\"\r\n		expose:\r\n			- \"80\"\r\n			- \"70\"\r\n+ 最终目录如下:\r\n	[root@www compose-haproxy-web]# tree\r\n	.\r\n	├── docker-compose.yml\r\n	├── haproxy\r\n	│   └── haproxy.cfg\r\n	└── web\r\n	    ├── Dockerfile\r\n	    └── index.py\r\n+ 在compose-haproxy-web目录下执行docker-compose up,会整合输出所有容器的输出\r\n\r\n```\r\n\r\n# 报错 \r\n```log\r\n+ YAML这个破东西我没有接触过,结果一上来脸就被他打肿了\r\n	[root@www compose-haproxy-web]# docker-compose up\r\n	ERROR: yaml.scanner.ScannerError: while scanning for the next token\r\n	found character \'\\t\' that cannot start any token\r\n	  in \"./docker-compose.yml\", line 4, column 1\r\n\r\n+ google之,发现:在YAML文件中需要脑机的一件事,必须使用空格进行缩进,不能使用制表符table,靠,(╯‵□′)╯︵┻━┻\r\n+ 最终文件格式如下(请忽略掉第一个制表符的缩进,这个缩进只是为了我的博文而添加的格式)\r\n	weba:\r\n	  build: ./web\r\n	  expose:\r\n	   - 80\r\n	webb:\r\n	  build: ./web\r\n	  expose:\r\n	   - 80\r\n	webc:\r\n	  build: ./web\r\n	  expose:\r\n	   - 80\r\n	haproxy:\r\n	 image: haproxy:latest\r\n	 volumes:\r\n	  - ./haproxy:/haproxy-override\r\n	  - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.c\r\n	 links:\r\n	  - weba\r\n	  - webb\r\n	  - webc\r\n	 ports:\r\n	  - \"80:80\"\r\n	  - \"70:70\"\r\n	 expose:\r\n	  - \"80\"\r\n	  - \"70\"	\r\n```\r\n\r\n# 关于YAML格式(结合docker-compose.yml来说)\r\n```log\r\n+ docker-compose.yml是使用 Compose 的核心\r\n+ 每个顶级元素为服务名称，次级元素为服务容器的配置信息\r\n+ 我么这个例子是version1,version2可以将service放在顶级元素services下\r\n+ 每个服务都必须通过 image 指令指定镜像或 build 指令（需要Dockerfile.比如说我们的web目录下就写好了Dockerfile文件）等\r\n	=============version1============\r\n	weba:			//服务\r\n	  build: ./web		//配置\r\n	  expose:		//配置\r\n	   - 80\r\n	webb:\r\n	  build: ./web\r\n	  expose:\r\n	   - 80\r\n	webc:\r\n	  build: ./web\r\n	  expose:\r\n	   - 80\r\n	haproxy:\r\n	 image: haproxy:latest\r\n	 volumes:\r\n	  - ./haproxy:/haproxy-override\r\n	  - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.c\r\n	 links:\r\n	  - weba\r\n	  - webb\r\n	  - webc\r\n	 ports:\r\n	  - \"80:80\"\r\n	  - \"70:70\"\r\n	 expose:\r\n	  - \"80\"\r\n	  - \"70\"\r\n\r\n	==============version2================\r\n	version: \"2\"\r\n	services:\r\n	 webapp:\r\n	 image: examples/web\r\n	 ports:\r\n	  - \"80:80\"\r\n	 volumes:\r\n	  - \"/data\"\r\n```\r\n\r\n# 指令介绍\r\n```log\r\n- 记我肯定记不住,也不一定过来查阅,可能google更快,不过还是例行抄一次吧,证明我来过^_^\r\n- 既然说YAML,那么顺便用一下他的格式,好像也挺好玩\r\n- 不行不行,太多,只抄几个常见的吧(╯‵□′)╯︵┻━┻\r\nbuild:		\r\n 指定 Dockerfile 所在文件夹的路径（可以是绝对路径，或者相对 dockercompose.yml 文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。\r\n 栗子:\r\n  build: /path/to/build/dir\r\n\r\ncontainer_name\r\n 指定容器名称。默认将会使用 项目名称_服务名称_序号 这样的格式\r\n 栗子:\r\n  container_name: docker-web-container\r\n\r\ndockerfile: \r\n 如果需要指定额外的编译镜像的 Dockefile 文件，可以通过该指令来指定	\r\n 栗子:\r\n  dockerfile: Dockerfile-alternate\r\n   \r\nexpose: \r\n 暴露端口，但不映射到宿主机，只被连接的服务访问。仅可以指定内部端口为参数	\r\n 栗子:\r\n  expose:\r\n   - \"3000\"\r\n   - \"8000\"\r\n\r\nexternal_links: \r\n 链接到 docker-compose.yml 外部的容器，甚至 并非 Compose 管理的外部容器	\r\n 栗子:\r\n  external_links:\r\n   - redis_1\r\n   - project_db_1:mysql\r\n   - project_db_1:postgresql\r\n\r\nimage: \r\n 指定为镜像名称或镜像 ID。如果镜像在本地不存在， Compose 将会尝试拉去这个镜像	\r\n 栗子:\r\n  image: ubuntu\r\n\r\nlinks: \r\n 链接到其它服务中的容器。使用服务名称（同时作为别名）或服务名称：服务别名（SERVICE:ALIAS） 格式都可以\r\n 栗子:\r\n  links:\r\n   - db\r\n   - db:database\r\n   - redis\r\n\r\nports: \r\n 暴露端口信息。使用宿主：容器 （HOST:CONTAINER） 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以\r\n 栗子:\r\n  ports:\r\n   - \"3000\"\r\n   - \"8000:8000\"\r\n   - \"49100:22\"\r\n   - \"127.0.0.1:8001:8001\"\r\n\r\nenough(╯‵□′)╯︵┻━┻\r\n问谷哥度娘吧,我受够辣\r\n```\r\n\r\n', '1', 'post', 'publish', 'none', 'default', '7', '0', '1', '1', '1');
INSERT INTO `t_contents` VALUES ('27', 'markdown语法', null, '1504146345', '1504146345', '# 欢迎使用Markdown编辑器写博客\r\n\r\n本Markdown编辑器使用[StackEdit][6]修改而来，用它写博客，将会带来全新的体验哦：\r\n\r\n- **Markdown和扩展Markdown简洁的语法**\r\n- **代码块高亮**\r\n- **图片链接和图片上传**\r\n- ***LaTex*数学公式**\r\n- **UML序列图和流程图**\r\n- **离线写博客**\r\n- **导入导出Markdown文件**\r\n- **丰富的快捷键**\r\n\r\n-------------------\r\n\r\n## 快捷键\r\n\r\n - 加粗    `Ctrl + B` \r\n - 斜体    `Ctrl + I` \r\n - 引用    `Ctrl + Q`\r\n - 插入链接    `Ctrl + L`\r\n - 插入代码    `Ctrl + K`\r\n - 插入图片    `Ctrl + G`\r\n - 提升标题    `Ctrl + H`\r\n - 有序列表    `Ctrl + O`\r\n - 无序列表    `Ctrl + U`\r\n - 横线    `Ctrl + R`\r\n - 撤销    `Ctrl + Z`\r\n - 重做    `Ctrl + Y`\r\n\r\n## Markdown及扩展\r\n\r\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href=\"https://zh.wikipedia.org/wiki/Markdown\" target=\"_blank\"> [ 维基百科 ]\r\n\r\n使用简单的符号标识不同的标题，将某些文字标记为**粗体**或者*斜体*，创建一个[链接](http://www.csdn.net)等，详细语法参考帮助？。\r\n\r\n本编辑器支持 **Markdown Extra** , 　扩展了很多好用的功能。具体请参考[Github][2].  \r\n\r\n### 表格\r\n\r\n**Markdown　Extra**　表格语法：\r\n\r\n项目     | 价格\r\n-------- | ---\r\nComputer | $1600\r\nPhone    | $12\r\nPipe     | $1\r\n\r\n可以使用冒号来定义对齐方式：\r\n\r\n| 项目      |    价格 | 数量  |\r\n| :-------- | --------:| :--: |\r\n| Computer  | 1600 元 |  5   |\r\n| Phone     |   12 元 |  12  |\r\n| Pipe      |    1 元 | 234  |\r\n\r\n###定义列表\r\n\r\n**Markdown　Extra**　定义列表语法：\r\n项目１\r\n项目２\r\n:   定义 A\r\n:   定义 B\r\n\r\n项目３\r\n:   定义 C\r\n\r\n:   定义 D\r\n\r\n	> 定义D内容\r\n\r\n### 代码块\r\n代码块语法遵循标准markdown代码，例如：\r\n``` python\r\n@requires_authorization\r\ndef somefunc(param1=\'\', param2=0):\r\n    \'\'\'A docstring\'\'\'\r\n    if param1 > param2: # interesting\r\n        print \'Greater\'\r\n    return (param2 - param1 + 1) or None\r\nclass SomeClass:\r\n    pass\r\n>>> message = \'\'\'interpreter\r\n... prompt\'\'\'\r\n```\r\n\r\n###脚注\r\n生成一个脚注[^footnote].\r\n  [^footnote]: 这里是 **脚注** 的 *内容*.\r\n  \r\n### 目录\r\n用 `[TOC]`来生成目录：\r\n\r\n[TOC]\r\n\r\n### 数学公式\r\n使用MathJax渲染*LaTex* 数学公式，详见[math.stackexchange.com][1].\r\n\r\n - 行内公式，数学公式为：$\\Gamma(n) = (n-1)!\\quad\\forall n\\in\\mathbb N$。\r\n - 块级公式：\r\n\r\n$$	x = \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$\r\n\r\n更多LaTex语法请参考 [这儿][3].\r\n\r\n### UML 图:\r\n\r\n可以渲染序列图：\r\n\r\n```sequence\r\n张三->李四: 嘿，小四儿, 写博客了没?\r\nNote right of 李四: 李四愣了一下，说：\r\n李四-->张三: 忙得吐血，哪有时间写。\r\n```\r\n\r\n或者流程图：\r\n\r\n```flow\r\nst=>start: 开始\r\ne=>end: 结束\r\nop=>operation: 我的操作\r\ncond=>condition: 确认？\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n- 关于 **序列图** 语法，参考 [这儿][4],\r\n- 关于 **流程图** 语法，参考 [这儿][5].\r\n\r\n## 离线写博客\r\n\r\n即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入[write.blog.csdn.net/mdeditor](http://write.blog.csdn.net/mdeditor)即可。**Markdown编辑器**使用浏览器离线存储将内容保存在本地。\r\n\r\n用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。\r\n\r\n博客发表后，本地缓存将被删除。　\r\n\r\n用户可以选择 <i class=\"icon-disk\"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。\r\n\r\n> **注意：**虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，**请务必及时发表或者保存到服务器草稿箱**。\r\n\r\n##浏览器兼容\r\n\r\n 1. 目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。\r\n 3. IE９以下不支持\r\n 4. IE９，１０，１１存在以下问题\r\n    1. 不支持离线功能\r\n    1. IE9不支持文件导入导出\r\n    1. IE10不支持拖拽文件导入\r\n\r\n---------\r\n\r\n[1]: http://math.stackexchange.com/\r\n[2]: https://github.com/jmcmanus/pagedown-extra \"Pagedown Extra\"\r\n[3]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\r\n[4]: http://bramp.github.io/js-sequence-diagrams/\r\n[5]: http://adrai.github.io/flowchart.js/\r\n[6]: https://github.com/benweet/stackedit', '1', 'post', 'publish', 'none', 'default', '1', '0', '1', '1', '1');

-- ----------------------------
-- Table structure for `t_logs`
-- ----------------------------
DROP TABLE IF EXISTS `t_logs`;
CREATE TABLE `t_logs` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `action` varchar(100) DEFAULT NULL,
  `data` varchar(2000) DEFAULT NULL,
  `author_id` int(10) DEFAULT NULL,
  `ip` varchar(20) DEFAULT NULL,
  `created` int(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_logs
-- ----------------------------
INSERT INTO `t_logs` VALUES ('1', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1501125349');
INSERT INTO `t_logs` VALUES ('2', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1501132290');
INSERT INTO `t_logs` VALUES ('3', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1501132335');
INSERT INTO `t_logs` VALUES ('4', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1501136783');
INSERT INTO `t_logs` VALUES ('5', '保存系统设置', '{\"site_keywords\":\"guang; private\",\"site_description\":\"this is guang\\u0027s base ,everything about guang is reported here.\",\"site_title\":\"Guang\",\"site_theme\":\"default\",\"allow_install\":\"\"}', '1', '0:0:0:0:0:0:0:1', '1501139587');
INSERT INTO `t_logs` VALUES ('6', '系统备份', null, '1', '0:0:0:0:0:0:0:1', '1501139774');
INSERT INTO `t_logs` VALUES ('7', '系统备份', null, '1', '0:0:0:0:0:0:0:1', '1501139786');
INSERT INTO `t_logs` VALUES ('8', '保存系统设置', '{\"social_zhihu\":\"\",\"social_github\":\"imshadowurlight\",\"social_twitter\":\"\",\"social_weibo\":\"156821138@qq.com\"}', '1', '0:0:0:0:0:0:0:1', '1501140724');
INSERT INTO `t_logs` VALUES ('9', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1501144066');
INSERT INTO `t_logs` VALUES ('10', '删除文章', '3', '1', '0:0:0:0:0:0:0:1', '1501146692');
INSERT INTO `t_logs` VALUES ('11', '删除文章', '4', '1', '0:0:0:0:0:0:0:1', '1501146697');
INSERT INTO `t_logs` VALUES ('12', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1501204682');
INSERT INTO `t_logs` VALUES ('13', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1501210017');
INSERT INTO `t_logs` VALUES ('14', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1501212128');
INSERT INTO `t_logs` VALUES ('15', '登录后台', null, '1', '127.0.0.1', '1501477554');
INSERT INTO `t_logs` VALUES ('16', '登录后台', null, '1', '127.0.0.1', '1501489146');
INSERT INTO `t_logs` VALUES ('17', '登录后台', null, '1', '127.0.0.1', '1501497224');
INSERT INTO `t_logs` VALUES ('18', '登录后台', null, '1', '127.0.0.1', '1501566699');
INSERT INTO `t_logs` VALUES ('19', '登录后台', null, '1', '127.0.0.1', '1501570389');
INSERT INTO `t_logs` VALUES ('20', '登录后台', null, '1', '127.0.0.1', '1501635387');
INSERT INTO `t_logs` VALUES ('21', '登录后台', null, '1', '127.0.0.1', '1501650353');
INSERT INTO `t_logs` VALUES ('22', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1501724435');
INSERT INTO `t_logs` VALUES ('23', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502155482');
INSERT INTO `t_logs` VALUES ('24', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502163672');
INSERT INTO `t_logs` VALUES ('25', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502170138');
INSERT INTO `t_logs` VALUES ('26', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502173222');
INSERT INTO `t_logs` VALUES ('27', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502175314');
INSERT INTO `t_logs` VALUES ('28', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502184056');
INSERT INTO `t_logs` VALUES ('29', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502352347');
INSERT INTO `t_logs` VALUES ('30', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502356465');
INSERT INTO `t_logs` VALUES ('31', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502428876');
INSERT INTO `t_logs` VALUES ('32', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502435030');
INSERT INTO `t_logs` VALUES ('33', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502438389');
INSERT INTO `t_logs` VALUES ('34', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502439080');
INSERT INTO `t_logs` VALUES ('35', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502677477');
INSERT INTO `t_logs` VALUES ('36', '删除文章', '2', '1', '0:0:0:0:0:0:0:1', '1502678575');
INSERT INTO `t_logs` VALUES ('37', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502687212');
INSERT INTO `t_logs` VALUES ('38', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1502693685');
INSERT INTO `t_logs` VALUES ('39', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503976946');
INSERT INTO `t_logs` VALUES ('40', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503987879');
INSERT INTO `t_logs` VALUES ('41', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1503994183');
INSERT INTO `t_logs` VALUES ('42', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1504054629');
INSERT INTO `t_logs` VALUES ('43', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1504060376');
INSERT INTO `t_logs` VALUES ('44', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1504063623');
INSERT INTO `t_logs` VALUES ('45', '登录后台', null, '1', '0:0:0:0:0:0:0:1', '1504146262');

-- ----------------------------
-- Table structure for `t_metas`
-- ----------------------------
DROP TABLE IF EXISTS `t_metas`;
CREATE TABLE `t_metas` (
  `mid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `slug` varchar(200) DEFAULT NULL,
  `type` varchar(32) NOT NULL DEFAULT '',
  `description` varchar(200) DEFAULT NULL,
  `sort` int(10) unsigned DEFAULT '0',
  `parent` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`mid`),
  KEY `slug` (`slug`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_metas
-- ----------------------------
INSERT INTO `t_metas` VALUES ('1', 'default', null, 'category', null, '0', '0');
INSERT INTO `t_metas` VALUES ('6', 'my github', 'https://github.com/ZHENFENG13', 'link', null, '0', '0');
INSERT INTO `t_metas` VALUES ('7', 'test', 'test', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('8', 'java', 'java', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('9', '默认分类', '默认分类', 'category', null, '0', '0');
INSERT INTO `t_metas` VALUES ('10', '百度', 'https://www.baidu.com/', 'link', 'https://ss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/img/logo/logo_white.png', '2', '0');
INSERT INTO `t_metas` VALUES ('11', 'Google', 'https://www.google.com/ncr', 'link', '', '1', '0');
INSERT INTO `t_metas` VALUES ('12', 'mysql', 'mysql', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('13', 'database', 'database', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('14', 'linux', 'linux', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('15', 'ide', 'ide', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('16', '虚拟化', '虚拟化', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('17', '云计算', '云计算', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('18', 'docker', 'docker', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('19', 'log', null, 'category', null, '0', '0');
INSERT INTO `t_metas` VALUES ('20', '学习路线', '学习路线', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('21', '学习方法', '学习方法', 'tag', null, '0', '0');
INSERT INTO `t_metas` VALUES ('22', 'none', 'none', 'tag', null, '0', '0');

-- ----------------------------
-- Table structure for `t_options`
-- ----------------------------
DROP TABLE IF EXISTS `t_options`;
CREATE TABLE `t_options` (
  `name` varchar(32) NOT NULL DEFAULT '',
  `value` varchar(1000) DEFAULT '',
  `description` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_options
-- ----------------------------
INSERT INTO `t_options` VALUES ('allow_install', '', '');
INSERT INTO `t_options` VALUES ('site_description', 'this is guang\'s base ,everything about guang is reported here.', null);
INSERT INTO `t_options` VALUES ('site_keywords', 'guang; private', null);
INSERT INTO `t_options` VALUES ('site_theme', 'default', null);
INSERT INTO `t_options` VALUES ('site_title', 'Guang', '');
INSERT INTO `t_options` VALUES ('social_github', 'imshadowurlight', null);
INSERT INTO `t_options` VALUES ('social_twitter', '', null);
INSERT INTO `t_options` VALUES ('social_weibo', '156821138@qq.com', null);
INSERT INTO `t_options` VALUES ('social_zhihu', '', null);

-- ----------------------------
-- Table structure for `t_relationships`
-- ----------------------------
DROP TABLE IF EXISTS `t_relationships`;
CREATE TABLE `t_relationships` (
  `cid` int(10) unsigned NOT NULL,
  `mid` int(10) unsigned NOT NULL,
  PRIMARY KEY (`cid`,`mid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_relationships
-- ----------------------------
INSERT INTO `t_relationships` VALUES ('5', '1');
INSERT INTO `t_relationships` VALUES ('5', '12');
INSERT INTO `t_relationships` VALUES ('5', '13');
INSERT INTO `t_relationships` VALUES ('6', '1');
INSERT INTO `t_relationships` VALUES ('6', '14');
INSERT INTO `t_relationships` VALUES ('7', '1');
INSERT INTO `t_relationships` VALUES ('7', '14');
INSERT INTO `t_relationships` VALUES ('8', '1');
INSERT INTO `t_relationships` VALUES ('8', '14');
INSERT INTO `t_relationships` VALUES ('9', '1');
INSERT INTO `t_relationships` VALUES ('9', '14');
INSERT INTO `t_relationships` VALUES ('10', '1');
INSERT INTO `t_relationships` VALUES ('10', '14');
INSERT INTO `t_relationships` VALUES ('11', '1');
INSERT INTO `t_relationships` VALUES ('11', '15');
INSERT INTO `t_relationships` VALUES ('12', '1');
INSERT INTO `t_relationships` VALUES ('12', '16');
INSERT INTO `t_relationships` VALUES ('12', '17');
INSERT INTO `t_relationships` VALUES ('13', '1');
INSERT INTO `t_relationships` VALUES ('13', '17');
INSERT INTO `t_relationships` VALUES ('13', '18');
INSERT INTO `t_relationships` VALUES ('14', '19');
INSERT INTO `t_relationships` VALUES ('14', '20');
INSERT INTO `t_relationships` VALUES ('15', '14');
INSERT INTO `t_relationships` VALUES ('15', '19');
INSERT INTO `t_relationships` VALUES ('16', '9');
INSERT INTO `t_relationships` VALUES ('16', '21');
INSERT INTO `t_relationships` VALUES ('17', '9');
INSERT INTO `t_relationships` VALUES ('18', '1');
INSERT INTO `t_relationships` VALUES ('18', '8');
INSERT INTO `t_relationships` VALUES ('19', '1');
INSERT INTO `t_relationships` VALUES ('19', '8');
INSERT INTO `t_relationships` VALUES ('20', '1');
INSERT INTO `t_relationships` VALUES ('20', '8');
INSERT INTO `t_relationships` VALUES ('21', '1');
INSERT INTO `t_relationships` VALUES ('21', '22');
INSERT INTO `t_relationships` VALUES ('22', '9');
INSERT INTO `t_relationships` VALUES ('22', '22');
INSERT INTO `t_relationships` VALUES ('23', '1');
INSERT INTO `t_relationships` VALUES ('23', '22');
INSERT INTO `t_relationships` VALUES ('24', '1');
INSERT INTO `t_relationships` VALUES ('24', '22');
INSERT INTO `t_relationships` VALUES ('25', '1');
INSERT INTO `t_relationships` VALUES ('25', '22');
INSERT INTO `t_relationships` VALUES ('26', '1');
INSERT INTO `t_relationships` VALUES ('26', '22');
INSERT INTO `t_relationships` VALUES ('27', '1');
INSERT INTO `t_relationships` VALUES ('27', '22');

-- ----------------------------
-- Table structure for `t_users`
-- ----------------------------
DROP TABLE IF EXISTS `t_users`;
CREATE TABLE `t_users` (
  `uid` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(32) DEFAULT NULL,
  `password` varchar(64) DEFAULT NULL,
  `email` varchar(200) DEFAULT NULL,
  `home_url` varchar(200) DEFAULT NULL,
  `screen_name` varchar(32) DEFAULT NULL,
  `created` int(10) unsigned DEFAULT '0',
  `activated` int(10) unsigned DEFAULT '0',
  `logged` int(10) unsigned DEFAULT '0',
  `group_name` varchar(16) DEFAULT 'visitor',
  PRIMARY KEY (`uid`),
  UNIQUE KEY `name` (`username`),
  UNIQUE KEY `mail` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of t_users
-- ----------------------------
INSERT INTO `t_users` VALUES ('1', 'admin', 'a66abb5684c45962d887564f08346e8d', '1034683568@qq.com', null, 'admin', '1490756162', '0', '0', 'visitor');
